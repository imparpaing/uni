
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b7c  08003b7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b84  08003b84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003b98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003b98  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b25c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  0002b296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c03  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8cf  00000000  00000000  0005485b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1231  00000000  00000000  0005f12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015035b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f9c  00000000  00000000  001503ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003b4c 	.word	0x08003b4c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003b4c 	.word	0x08003b4c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <uart_print+0x2c>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 800054c:	bf00      	nop
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <uart_print+0x2c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <uart_print+0x12>
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40004800 	.word	0x40004800

0800056c <char_is_endmessage>:

// --- Reception ---
uint8_t char_is_endmessage(char c)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0d      	cmp	r3, #13
 800057a:	d002      	beq.n	8000582 <char_is_endmessage+0x16>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d101      	bne.n	8000586 <char_is_endmessage+0x1a>
	{
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <char_is_endmessage+0x1c>
	}
	else return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <rx_has_data>:

uint8_t rx_has_data()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <rx_has_data+0x24>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <rx_has_data+0x28>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d101      	bne.n	80005ac <rx_has_data+0x18>
	{
		return 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e000      	b.n	80005ae <rx_has_data+0x1a>
	}
	else return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	200000f2 	.word	0x200000f2
 80005bc:	200000f4 	.word	0x200000f4

080005c0 <increase_rx_empty>:

void increase_rx_empty()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	rx_empty++;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <increase_rx_empty+0x2c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <increase_rx_empty+0x2c>)
 80005d0:	801a      	strh	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <increase_rx_empty+0x2c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	2b1e      	cmp	r3, #30
 80005da:	d902      	bls.n	80005e2 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <increase_rx_empty+0x2c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	}
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200000f2 	.word	0x200000f2

080005f0 <increase_rx_busy>:

void increase_rx_busy()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	rx_busy++;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <increase_rx_busy+0x2c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <increase_rx_busy+0x2c>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <increase_rx_busy+0x2c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b1e      	cmp	r3, #30
 800060a:	d902      	bls.n	8000612 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <increase_rx_busy+0x2c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	200000f4 	.word	0x200000f4

08000620 <get_char>:

// Get character from the reception buffer
uint8_t get_char()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <get_char+0x24>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <get_char+0x28>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000634:	f7ff ffdc 	bl	80005f0 <increase_rx_busy>
	return tmp;
 8000638:	79fb      	ldrb	r3, [r7, #7]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000f4 	.word	0x200000f4
 8000648:	200000d4 	.word	0x200000d4

0800064c <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t mssg_length = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000658:	e041      	b.n	80006de <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <get_message+0xa8>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	461c      	mov	r4, r3
 8000660:	f7ff ffde 	bl	8000620 <get_char>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <get_message+0xac>)
 800066a:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <get_message+0xa8>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <get_message+0xac>)
 8000674:	5c9b      	ldrb	r3, [r3, r2]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff78 	bl	800056c <char_is_endmessage>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d021      	beq.n	80006c6 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <get_message+0xa8>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <get_message+0xac>)
 800068a:	2100      	movs	r1, #0
 800068c:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e009      	b.n	80006a8 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	440b      	add	r3, r1
 800069c:	4916      	ldr	r1, [pc, #88]	; (80006f8 <get_message+0xac>)
 800069e:	5c8a      	ldrb	r2, [r1, r2]
 80006a0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <get_message+0xa8>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3ef      	bcc.n	8000694 <get_message+0x48>
			}

			mssg_length = idx;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <get_message+0xa8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <get_message+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
			return mssg_length;
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	e011      	b.n	80006ea <get_message+0x9e>
		}
		else
		{
			idx++;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <get_message+0xa8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <get_message+0xa8>)
 80006d0:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <get_message+0xa8>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2b1e      	cmp	r3, #30
 80006d8:	d901      	bls.n	80006de <get_message+0x92>
 80006da:	2300      	movs	r3, #0
 80006dc:	e005      	b.n	80006ea <get_message+0x9e>
	while(rx_has_data() == 1)
 80006de:	f7ff ff59 	bl	8000594 <rx_has_data>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d0b8      	beq.n	800065a <get_message+0xe>
		}
	}
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000f6 	.word	0x200000f6
 80006f8:	200000f8 	.word	0x200000f8

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fa57 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f822 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 f8be 	bl	8000888 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f88c 	bl	8000828 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	490a      	ldr	r1, [pc, #40]	; (800073c <main+0x40>)
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <main+0x44>)
 8000716:	f001 ffad 	bl	8002674 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (char_is_endmessage(character))
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <main+0x40>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff24 	bl	800056c <char_is_endmessage>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f7      	beq.n	800071a <main+0x1e>
	  {
		  message_length = get_message(message);
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <main+0x48>)
 800072c:	f7ff ff8e 	bl	800064c <get_message>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <main+0x4c>)
 8000736:	801a      	strh	r2, [r3, #0]
	  if (char_is_endmessage(character))
 8000738:	e7ef      	b.n	800071a <main+0x1e>
 800073a:	bf00      	nop
 800073c:	200000b0 	.word	0x200000b0
 8000740:	20000028 	.word	0x20000028
 8000744:	200000b4 	.word	0x200000b4
 8000748:	200000d2 	.word	0x200000d2

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	; 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f9ee 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <SystemClock_Config+0xd4>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <SystemClock_Config+0xd4>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemClock_Config+0xd4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <SystemClock_Config+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a25      	ldr	r2, [pc, #148]	; (8000824 <SystemClock_Config+0xd8>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xd8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b4:	2308      	movs	r3, #8
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007b8:	23d8      	movs	r3, #216	; 0xd8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fe07 	bl	80013e0 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d8:	f000 f8da 	bl	8000990 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007dc:	f000 fdb0 	bl	8001340 <HAL_PWREx_EnableOverDrive>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f8d3 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2107      	movs	r1, #7
 8000808:	4618      	mov	r0, r3
 800080a:	f001 f897 	bl	800193c <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000814:	f000 f8bc 	bl	8000990 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f001 feb4 	bl	80025d8 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f88b 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000028 	.word	0x20000028
 8000884:	40004800 	.word	0x40004800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_GPIO_Init+0xa8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0xac>)
 80008ec:	f000 fd0e 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0xb0>)
 8000906:	f000 fb55 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0xac>)
 8000922:	f000 fb47 	bl	8000fb4 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40020800 	.word	0x40020800

0800093c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_RxCpltCallback+0x44>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdf7 	bl	800053c <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_UART_RxCpltCallback+0x48>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d10e      	bne.n	8000976 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_UART_RxCpltCallback+0x4c>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_UART_RxCpltCallback+0x44>)
 8000962:	7819      	ldrb	r1, [r3, #0]
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_UART_RxCpltCallback+0x50>)
 8000966:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8000968:	f7ff fe2a 	bl	80005c0 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	4904      	ldr	r1, [pc, #16]	; (8000980 <HAL_UART_RxCpltCallback+0x44>)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f001 fe7f 	bl	8002674 <HAL_UART_Receive_IT>
	}
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000b0 	.word	0x200000b0
 8000984:	40004800 	.word	0x40004800
 8000988:	200000f2 	.word	0x200000f2
 800098c:	200000d4 	.word	0x200000d4

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_MspInit+0x54>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_MspInit+0x54>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_MspInit+0x54>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fa1a 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2005      	movs	r0, #5
 80009de:	f000 fa20 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80009e2:	2005      	movs	r0, #5
 80009e4:	f000 fa39 	bl	8000e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0ae      	sub	sp, #184	; 0xb8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2290      	movs	r2, #144	; 0x90
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 f891 	bl	8003b3c <memset>
  if(huart->Instance==USART3)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <HAL_UART_MspInit+0xc4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d144      	bne.n	8000aae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f9a8 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a3e:	f7ff ffa7 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0xc8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_UART_MspInit+0xcc>)
 8000a9a:	f000 fa8b 	bl	8000fb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f000 f9bd 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aa8:	2027      	movs	r0, #39	; 0x27
 8000aaa:	f000 f9d6 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	37b8      	adds	r7, #184	; 0xb8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f88c 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART3_IRQHandler+0x10>)
 8000b2e:	f001 fde5 	bl	80026fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000028 	.word	0x20000028

08000b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 ffb1 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fdb3 	bl	80006fc <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	08003b8c 	.word	0x08003b8c
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	2000011c 	.word	0x2000011c

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>

08000bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f928 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f805 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc2:	f7ff feeb 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f943 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f90b 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000118 	.word	0x20000118

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000118 	.word	0x20000118

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	05fa0000 	.word	0x05fa0000

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff feda 	bl	8000c54 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d008      	beq.n	8000ec0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e052      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0216 	bic.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ede:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <HAL_DMA_Abort+0x62>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0208 	bic.w	r2, r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e013      	b.n	8000f3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fe9f 	bl	8000c54 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d90c      	bls.n	8000f3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e015      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e4      	bne.n	8000f12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4c:	223f      	movs	r2, #63	; 0x3f
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d004      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e00c      	b.n	8000fa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e175      	b.n	80012c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8164 	bne.w	80012ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x56>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80be 	beq.w	80012ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001156:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d037      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d031      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x338>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x33c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x340>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x22a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x344>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x348>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x34c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x350>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x21a>
 80011ca:	2309      	movs	r3, #9
 80011cc:	e012      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ce:	230a      	movs	r3, #10
 80011d0:	e010      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_GPIO_Init+0x354>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_GPIO_Init+0x354>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_GPIO_Init+0x354>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae86 	bls.w	8000fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40022000 	.word	0x40022000
 8001304:	40022400 	.word	0x40022400
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136e:	f7ff fc71 	bl	8000c54 <HAL_GetTick>
 8001372:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001374:	e009      	b.n	800138a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001376:	f7ff fc6d 	bl	8000c54 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001384:	d901      	bls.n	800138a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e022      	b.n	80013d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001396:	d1ee      	bne.n	8001376 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff fc56 	bl	8000c54 <HAL_GetTick>
 80013a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013aa:	e009      	b.n	80013c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013ac:	f7ff fc52 	bl	8000c54 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ba:	d901      	bls.n	80013c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e007      	b.n	80013d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013cc:	d1ee      	bne.n	80013ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e29b      	b.n	800192e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8087 	beq.w	8001512 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00c      	beq.n	800142a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d112      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
 800141c:	4b90      	ldr	r3, [pc, #576]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001428:	d10b      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b8d      	ldr	r3, [pc, #564]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d06c      	beq.n	8001510 <HAL_RCC_OscConfig+0x130>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d168      	bne.n	8001510 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e275      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x7a>
 800144c:	4b84      	ldr	r3, [pc, #528]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a83      	ldr	r2, [pc, #524]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x9c>
 8001462:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b7c      	ldr	r3, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b73      	ldr	r3, [pc, #460]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a72      	ldr	r2, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6b      	ldr	r2, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbc8 	bl	8000c54 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbc4 	bl	8000c54 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e229      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fbb4 	bl	8000c54 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbb0 	bl	8000c54 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e215      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x110>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d069      	beq.n	80015f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x190>
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1e9      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	493d      	ldr	r1, [pc, #244]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e040      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fb66 	bl	8000c54 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fb62 	bl	8000c54 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1c7      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4929      	ldr	r1, [pc, #164]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb42 	bl	8000c54 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fb3e 	bl	8000c54 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1a3      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d038      	beq.n	8001670 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d019      	beq.n	800163a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb1f 	bl	8000c54 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fb1b 	bl	8000c54 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e180      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x23a>
 8001638:	e01a      	b.n	8001670 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fb05 	bl	8000c54 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fb01 	bl	8000c54 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d903      	bls.n	8001664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e166      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
 8001660:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a4 	beq.w	80017c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b89      	ldr	r3, [pc, #548]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a88      	ldr	r2, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b86      	ldr	r3, [pc, #536]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	4b83      	ldr	r3, [pc, #524]	; (80018b4 <HAL_RCC_OscConfig+0x4d4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016b2:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7f      	ldr	r2, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x4d4>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff fac9 	bl	8000c54 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7ff fac5 	bl	8000c54 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e12a      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x4d4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x31a>
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x33c>
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a67      	ldr	r2, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	e01c      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x35e>
 8001724:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a61      	ldr	r2, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fa79 	bl	8000c54 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fa75 	bl	8000c54 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0d8      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCC_OscConfig+0x386>
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fa63 	bl	8000c54 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fa5f 	bl	8000c54 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0c2      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80ae 	beq.w	800192c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d06d      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d14b      	bne.n	800187c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa30 	bl	8000c54 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fa2c 	bl	8000c54 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e091      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	3b01      	subs	r3, #1
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	071b      	lsls	r3, r3, #28
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f9fe 	bl	8000c54 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f9fa 	bl	8000c54 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e05f      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x47c>
 800187a:	e057      	b.n	800192c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff f9e4 	bl	8000c54 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f9e0 	bl	8000c54 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e045      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x4b0>
 80018ae:	e03d      	b.n	800192c <HAL_RCC_OscConfig+0x54c>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x558>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d030      	beq.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d129      	bne.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d122      	bne.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d119      	bne.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d10f      	bne.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0d0      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 020f 	bic.w	r2, r3, #15
 800196a:	4965      	ldr	r1, [pc, #404]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b8      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494d      	ldr	r1, [pc, #308]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d040      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e073      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06b      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4936      	ldr	r1, [pc, #216]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f910 	bl	8000c54 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f90c 	bl	8000c54 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e053      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d210      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 020f 	bic.w	r2, r3, #15
 8001a76:	4922      	ldr	r1, [pc, #136]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e032      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4916      	ldr	r1, [pc, #88]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f821 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490a      	ldr	r1, [pc, #40]	; (8001b08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1d4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f86c 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08003b64 	.word	0x08003b64
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b094      	sub	sp, #80	; 0x50
 8001b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b20:	2300      	movs	r3, #0
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d00d      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x40>
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	f200 80e1 	bhi.w	8001d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x34>
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b46:	e0db      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4c:	e0db      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b52:	e0d8      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b54:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	2200      	movs	r2, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b86:	4622      	mov	r2, r4
 8001b88:	462b      	mov	r3, r5
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b98:	0150      	lsls	r0, r2, #5
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	1a51      	subs	r1, r2, r1
 8001ba2:	6139      	str	r1, [r7, #16]
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bb8:	4659      	mov	r1, fp
 8001bba:	018b      	lsls	r3, r1, #6
 8001bbc:	4651      	mov	r1, sl
 8001bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc2:	4651      	mov	r1, sl
 8001bc4:	018a      	lsls	r2, r1, #6
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bcc:	4659      	mov	r1, fp
 8001bce:	eb63 0901 	sbc.w	r9, r3, r1
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be6:	4690      	mov	r8, r2
 8001be8:	4699      	mov	r9, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	eb18 0303 	adds.w	r3, r8, r3
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	462b      	mov	r3, r5
 8001bf4:	eb49 0303 	adc.w	r3, r9, r3
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c06:	4629      	mov	r1, r5
 8001c08:	024b      	lsls	r3, r1, #9
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c10:	4621      	mov	r1, r4
 8001c12:	024a      	lsls	r2, r1, #9
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c24:	f7fe fb08 	bl	8000238 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c30:	e058      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	099b      	lsrs	r3, r3, #6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	464b      	mov	r3, r9
 8001c50:	f04f 0000 	mov.w	r0, #0
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	0159      	lsls	r1, r3, #5
 8001c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5e:	0150      	lsls	r0, r2, #5
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4641      	mov	r1, r8
 8001c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c84:	ebb2 040a 	subs.w	r4, r2, sl
 8001c88:	eb63 050b 	sbc.w	r5, r3, fp
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	00eb      	lsls	r3, r5, #3
 8001c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c9a:	00e2      	lsls	r2, r4, #3
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	18e3      	adds	r3, r4, r3
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	eb45 0303 	adc.w	r3, r5, r3
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cba:	4629      	mov	r1, r5
 8001cbc:	028b      	lsls	r3, r1, #10
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	028a      	lsls	r2, r1, #10
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	61fa      	str	r2, [r7, #28]
 8001cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd8:	f7fe faae 	bl	8000238 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	0c1b      	lsrs	r3, r3, #16
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3750      	adds	r7, #80	; 0x50
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d3c:	f7ff fff0 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0a9b      	lsrs	r3, r3, #10
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08003b74 	.word	0x08003b74

08001d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d64:	f7ff ffdc 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0b5b      	lsrs	r3, r3, #13
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08003b74 	.word	0x08003b74

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001db0:	4b69      	ldr	r3, [pc, #420]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a68      	ldr	r2, [pc, #416]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dba:	6093      	str	r3, [r2, #8]
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	4964      	ldr	r1, [pc, #400]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d017      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	4959      	ldr	r1, [pc, #356]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e00:	d101      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d017      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 808b 	beq.w	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e90:	f7fe fee0 	bl	8000c54 <HAL_GetTick>
 8001e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe fedc 	bl	8000c54 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e38f      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d035      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d02e      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d114      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fea4 	bl	8000c54 <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7fe fea0 	bl	8000c54 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e351      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ee      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	4901      	ldr	r1, [pc, #4]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	0ffffcff 	.word	0x0ffffcff
 8001f64:	4bac      	ldr	r3, [pc, #688]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4aab      	ldr	r2, [pc, #684]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f6e:	6093      	str	r3, [r2, #8]
 8001f70:	4ba9      	ldr	r3, [pc, #676]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	49a6      	ldr	r1, [pc, #664]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f8e:	4ba2      	ldr	r3, [pc, #648]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f94:	4aa0      	ldr	r2, [pc, #640]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f9e:	4b9e      	ldr	r3, [pc, #632]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	499b      	ldr	r1, [pc, #620]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fbc:	4b96      	ldr	r3, [pc, #600]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fca:	4993      	ldr	r1, [pc, #588]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fde:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fec:	498a      	ldr	r1, [pc, #552]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002000:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	4982      	ldr	r1, [pc, #520]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002022:	4b7d      	ldr	r3, [pc, #500]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4979      	ldr	r1, [pc, #484]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002044:	4b74      	ldr	r3, [pc, #464]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4971      	ldr	r1, [pc, #452]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002066:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f023 020c 	bic.w	r2, r3, #12
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	4968      	ldr	r1, [pc, #416]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4960      	ldr	r1, [pc, #384]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b8:	4957      	ldr	r1, [pc, #348]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020cc:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	494f      	ldr	r1, [pc, #316]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4946      	ldr	r1, [pc, #280]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	493e      	ldr	r1, [pc, #248]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	4935      	ldr	r1, [pc, #212]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002162:	492d      	ldr	r1, [pc, #180]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	4924      	ldr	r1, [pc, #144]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002194:	d101      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	4914      	ldr	r1, [pc, #80]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e8:	490b      	ldr	r1, [pc, #44]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00f      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220c:	4902      	ldr	r1, [pc, #8]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002214:	e002      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002228:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	4986      	ldr	r1, [pc, #536]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225c:	497d      	ldr	r1, [pc, #500]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d006      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d6 	beq.w	8002424 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002278:	4b76      	ldr	r3, [pc, #472]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a75      	ldr	r2, [pc, #468]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe fce6 	bl	8000c54 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800228c:	f7fe fce2 	bl	8000c54 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e195      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d021      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11d      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	019a      	lsls	r2, r3, #6
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	071b      	lsls	r3, r3, #28
 80022f2:	4958      	ldr	r1, [pc, #352]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02e      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002324:	d129      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002334:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233a:	0f1b      	lsrs	r3, r3, #28
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	019a      	lsls	r2, r3, #6
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	431a      	orrs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	493e      	ldr	r1, [pc, #248]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002368:	f023 021f 	bic.w	r2, r3, #31
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	3b01      	subs	r3, #1
 8002372:	4938      	ldr	r1, [pc, #224]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01d      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002386:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	0e1b      	lsrs	r3, r3, #24
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239a:	0f1b      	lsrs	r3, r3, #28
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	019a      	lsls	r2, r3, #6
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	071b      	lsls	r3, r3, #28
 80023ba:	4926      	ldr	r1, [pc, #152]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d011      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	019a      	lsls	r2, r3, #6
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	071b      	lsls	r3, r3, #28
 80023ea:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fe:	f7fe fc29 	bl	8000c54 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002406:	f7fe fc25 	bl	8000c54 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0d8      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b01      	cmp	r3, #1
 8002428:	f040 80ce 	bne.w	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002438:	f7fe fc0c 	bl	8000c54 <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800243e:	e00b      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002440:	f7fe fc08 	bl	8000c54 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d904      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0bb      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002458:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002464:	d0ec      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02e      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d12a      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	0f1b      	lsrs	r3, r3, #28
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	019a      	lsls	r2, r3, #6
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	431a      	orrs	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	071b      	lsls	r3, r3, #28
 80024c2:	4944      	ldr	r1, [pc, #272]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ca:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	493d      	ldr	r1, [pc, #244]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d022      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f8:	d11d      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	0e1b      	lsrs	r3, r3, #24
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	0f1b      	lsrs	r3, r3, #28
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	019a      	lsls	r2, r3, #6
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	061b      	lsls	r3, r3, #24
 8002528:	431a      	orrs	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	071b      	lsls	r3, r3, #28
 800252e:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d028      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	0e1b      	lsrs	r3, r3, #24
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	019a      	lsls	r2, r3, #6
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	4917      	ldr	r1, [pc, #92]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	4911      	ldr	r1, [pc, #68]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a0:	f7fe fb58 	bl	8000c54 <HAL_GetTick>
 80025a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a8:	f7fe fb54 	bl	8000c54 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e007      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c6:	d1ef      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e040      	b.n	800266c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe f9fa 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fb82 	bl	8002d20 <UART_SetConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e022      	b.n	800266c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fdda 	bl	80031e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fe61 	bl	800332c <UART_CheckIdleState>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002688:	2b20      	cmp	r3, #32
 800268a:	d132      	bne.n	80026f2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_UART_Receive_IT+0x24>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02b      	b.n	80026f4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	613b      	str	r3, [r7, #16]
   return(result);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	69f9      	ldr	r1, [r7, #28]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	61bb      	str	r3, [r7, #24]
   return(result);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e6      	bne.n	80026b0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 ff33 	bl	8003554 <UART_Start_Receive_IT>
 80026ee:	4603      	mov	r3, r0
 80026f0:	e000      	b.n	80026f4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ba      	sub	sp, #232	; 0xe8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002726:	f640 030f 	movw	r3, #2063	; 0x80f
 800272a:	4013      	ands	r3, r2
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00f      	beq.n	8002764 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 82ac 	beq.w	8002cb2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
      }
      return;
 8002762:	e2a6      	b.n	8002cb2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8117 	beq.w	800299c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800277a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_UART_IRQHandler+0x298>)
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 810a 	beq.w	800299c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <HAL_UART_IRQHandler+0xbc>
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <HAL_UART_IRQHandler+0xec>
 80027c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d011      	beq.n	8002818 <HAL_UART_IRQHandler+0x11c>
 80027f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2204      	movs	r2, #4
 8002806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_UART_IRQHandler+0x18a>
 8002860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8212 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800289e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d005      	beq.n	80028de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04f      	beq.n	800297e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fefe 	bl	80036e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d141      	bne.n	8002976 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3308      	adds	r3, #8
 80028f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800290c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3308      	adds	r3, #8
 800291a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800291e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800292a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1d9      	bne.n	80028f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002942:	2b00      	cmp	r3, #0
 8002944:	d013      	beq.n	800296e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_UART_IRQHandler+0x29c>)
 800294c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fb0b 	bl	8000f6e <HAL_DMA_Abort_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d017      	beq.n	800298e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002968:	4610      	mov	r0, r2
 800296a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	e00f      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9b6 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	e00b      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9b2 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e007      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9ae 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800298c:	e193      	b.n	8002cb6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298e:	bf00      	nop
    return;
 8002990:	e191      	b.n	8002cb6 <HAL_UART_IRQHandler+0x5ba>
 8002992:	bf00      	nop
 8002994:	04000120 	.word	0x04000120
 8002998:	080037a9 	.word	0x080037a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 814c 	bne.w	8002c3e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8145 	beq.w	8002c3e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 813e 	beq.w	8002c3e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	f040 80b6 	bne.w	8002b46 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8165 	beq.w	8002cba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029fa:	429a      	cmp	r2, r3
 80029fc:	f080 815d 	bcs.w	8002cba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a14:	f000 8086 	beq.w	8002b24 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1da      	bne.n	8002a18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3308      	adds	r3, #8
 8002a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6c:	e853 3f00 	ldrex	r3, [r3]
 8002a70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e1      	bne.n	8002a62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3308      	adds	r3, #8
 8002abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e3      	bne.n	8002a9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af4:	f023 0310 	bic.w	r3, r3, #16
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e4      	bne.n	8002ae4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f9b5 	bl	8000e8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8d8 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b44:	e0b9      	b.n	8002cba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80ab 	beq.w	8002cbe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a6 	beq.w	8002cbe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
 8002b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e4      	bne.n	8002b72 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e3      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	617b      	str	r3, [r7, #20]
   return(result);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f85c 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3c:	e03f      	b.n	8002cbe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00e      	beq.n	8002c68 <HAL_UART_IRQHandler+0x56c>
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f853 	bl	8002d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c66:	e02d      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01c      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
    }
    return;
 8002c90:	e017      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
 8002c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fd92 	bl	80037d4 <UART_EndTransmit_IT>
    return;
 8002cb0:	e008      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cb2:	bf00      	nop
 8002cb4:	e006      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002cb6:	bf00      	nop
 8002cb8:	e004      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002cc2:	bf00      	nop
  }

}
 8002cc4:	37e8      	adds	r7, #232	; 0xe8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop

08002ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4ba6      	ldr	r3, [pc, #664]	; (8002fe4 <UART_SetConfig+0x2c4>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a94      	ldr	r2, [pc, #592]	; (8002fe8 <UART_SetConfig+0x2c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d120      	bne.n	8002dde <UART_SetConfig+0xbe>
 8002d9c:	4b93      	ldr	r3, [pc, #588]	; (8002fec <UART_SetConfig+0x2cc>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d816      	bhi.n	8002dd8 <UART_SetConfig+0xb8>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <UART_SetConfig+0x90>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dcd 	.word	0x08002dcd
 8002db8:	08002dc7 	.word	0x08002dc7
 8002dbc:	08002dd3 	.word	0x08002dd3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e150      	b.n	8003068 <UART_SetConfig+0x348>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e14d      	b.n	8003068 <UART_SetConfig+0x348>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e14a      	b.n	8003068 <UART_SetConfig+0x348>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e147      	b.n	8003068 <UART_SetConfig+0x348>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e144      	b.n	8003068 <UART_SetConfig+0x348>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <UART_SetConfig+0x2d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d132      	bne.n	8002e4e <UART_SetConfig+0x12e>
 8002de8:	4b80      	ldr	r3, [pc, #512]	; (8002fec <UART_SetConfig+0x2cc>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d828      	bhi.n	8002e48 <UART_SetConfig+0x128>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <UART_SetConfig+0xdc>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e31 	.word	0x08002e31
 8002e00:	08002e49 	.word	0x08002e49
 8002e04:	08002e49 	.word	0x08002e49
 8002e08:	08002e49 	.word	0x08002e49
 8002e0c:	08002e3d 	.word	0x08002e3d
 8002e10:	08002e49 	.word	0x08002e49
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e49 	.word	0x08002e49
 8002e1c:	08002e37 	.word	0x08002e37
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08002e49 	.word	0x08002e49
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e118      	b.n	8003068 <UART_SetConfig+0x348>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e115      	b.n	8003068 <UART_SetConfig+0x348>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e112      	b.n	8003068 <UART_SetConfig+0x348>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e10f      	b.n	8003068 <UART_SetConfig+0x348>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e10c      	b.n	8003068 <UART_SetConfig+0x348>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a68      	ldr	r2, [pc, #416]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d120      	bne.n	8002e9a <UART_SetConfig+0x17a>
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <UART_SetConfig+0x2cc>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e62:	2b30      	cmp	r3, #48	; 0x30
 8002e64:	d013      	beq.n	8002e8e <UART_SetConfig+0x16e>
 8002e66:	2b30      	cmp	r3, #48	; 0x30
 8002e68:	d814      	bhi.n	8002e94 <UART_SetConfig+0x174>
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d009      	beq.n	8002e82 <UART_SetConfig+0x162>
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d810      	bhi.n	8002e94 <UART_SetConfig+0x174>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <UART_SetConfig+0x15c>
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d006      	beq.n	8002e88 <UART_SetConfig+0x168>
 8002e7a:	e00b      	b.n	8002e94 <UART_SetConfig+0x174>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e0f2      	b.n	8003068 <UART_SetConfig+0x348>
 8002e82:	2302      	movs	r3, #2
 8002e84:	77fb      	strb	r3, [r7, #31]
 8002e86:	e0ef      	b.n	8003068 <UART_SetConfig+0x348>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e0ec      	b.n	8003068 <UART_SetConfig+0x348>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e0e9      	b.n	8003068 <UART_SetConfig+0x348>
 8002e94:	2310      	movs	r3, #16
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e0e6      	b.n	8003068 <UART_SetConfig+0x348>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <UART_SetConfig+0x2d8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d120      	bne.n	8002ee6 <UART_SetConfig+0x1c6>
 8002ea4:	4b51      	ldr	r3, [pc, #324]	; (8002fec <UART_SetConfig+0x2cc>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002eae:	2bc0      	cmp	r3, #192	; 0xc0
 8002eb0:	d013      	beq.n	8002eda <UART_SetConfig+0x1ba>
 8002eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002eb4:	d814      	bhi.n	8002ee0 <UART_SetConfig+0x1c0>
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d009      	beq.n	8002ece <UART_SetConfig+0x1ae>
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d810      	bhi.n	8002ee0 <UART_SetConfig+0x1c0>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <UART_SetConfig+0x1a8>
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d006      	beq.n	8002ed4 <UART_SetConfig+0x1b4>
 8002ec6:	e00b      	b.n	8002ee0 <UART_SetConfig+0x1c0>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e0cc      	b.n	8003068 <UART_SetConfig+0x348>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e0c9      	b.n	8003068 <UART_SetConfig+0x348>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e0c6      	b.n	8003068 <UART_SetConfig+0x348>
 8002eda:	2308      	movs	r3, #8
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e0c3      	b.n	8003068 <UART_SetConfig+0x348>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e0c0      	b.n	8003068 <UART_SetConfig+0x348>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <UART_SetConfig+0x2dc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <UART_SetConfig+0x21c>
 8002ef0:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <UART_SetConfig+0x2cc>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efe:	d017      	beq.n	8002f30 <UART_SetConfig+0x210>
 8002f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f04:	d817      	bhi.n	8002f36 <UART_SetConfig+0x216>
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0a:	d00b      	beq.n	8002f24 <UART_SetConfig+0x204>
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	d811      	bhi.n	8002f36 <UART_SetConfig+0x216>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <UART_SetConfig+0x1fe>
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d006      	beq.n	8002f2a <UART_SetConfig+0x20a>
 8002f1c:	e00b      	b.n	8002f36 <UART_SetConfig+0x216>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e0a1      	b.n	8003068 <UART_SetConfig+0x348>
 8002f24:	2302      	movs	r3, #2
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e09e      	b.n	8003068 <UART_SetConfig+0x348>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e09b      	b.n	8003068 <UART_SetConfig+0x348>
 8002f30:	2308      	movs	r3, #8
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e098      	b.n	8003068 <UART_SetConfig+0x348>
 8002f36:	2310      	movs	r3, #16
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e095      	b.n	8003068 <UART_SetConfig+0x348>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <UART_SetConfig+0x2e0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d125      	bne.n	8002f92 <UART_SetConfig+0x272>
 8002f46:	4b29      	ldr	r3, [pc, #164]	; (8002fec <UART_SetConfig+0x2cc>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f54:	d017      	beq.n	8002f86 <UART_SetConfig+0x266>
 8002f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5a:	d817      	bhi.n	8002f8c <UART_SetConfig+0x26c>
 8002f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f60:	d00b      	beq.n	8002f7a <UART_SetConfig+0x25a>
 8002f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f66:	d811      	bhi.n	8002f8c <UART_SetConfig+0x26c>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <UART_SetConfig+0x254>
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d006      	beq.n	8002f80 <UART_SetConfig+0x260>
 8002f72:	e00b      	b.n	8002f8c <UART_SetConfig+0x26c>
 8002f74:	2301      	movs	r3, #1
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e076      	b.n	8003068 <UART_SetConfig+0x348>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e073      	b.n	8003068 <UART_SetConfig+0x348>
 8002f80:	2304      	movs	r3, #4
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e070      	b.n	8003068 <UART_SetConfig+0x348>
 8002f86:	2308      	movs	r3, #8
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e06d      	b.n	8003068 <UART_SetConfig+0x348>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e06a      	b.n	8003068 <UART_SetConfig+0x348>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <UART_SetConfig+0x2e4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d138      	bne.n	800300e <UART_SetConfig+0x2ee>
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <UART_SetConfig+0x2cc>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002faa:	d017      	beq.n	8002fdc <UART_SetConfig+0x2bc>
 8002fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fb0:	d82a      	bhi.n	8003008 <UART_SetConfig+0x2e8>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d00b      	beq.n	8002fd0 <UART_SetConfig+0x2b0>
 8002fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbc:	d824      	bhi.n	8003008 <UART_SetConfig+0x2e8>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <UART_SetConfig+0x2aa>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d006      	beq.n	8002fd6 <UART_SetConfig+0x2b6>
 8002fc8:	e01e      	b.n	8003008 <UART_SetConfig+0x2e8>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e04b      	b.n	8003068 <UART_SetConfig+0x348>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e048      	b.n	8003068 <UART_SetConfig+0x348>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e045      	b.n	8003068 <UART_SetConfig+0x348>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e042      	b.n	8003068 <UART_SetConfig+0x348>
 8002fe2:	bf00      	nop
 8002fe4:	efff69f3 	.word	0xefff69f3
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40004400 	.word	0x40004400
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	40004c00 	.word	0x40004c00
 8002ffc:	40005000 	.word	0x40005000
 8003000:	40011400 	.word	0x40011400
 8003004:	40007800 	.word	0x40007800
 8003008:	2310      	movs	r3, #16
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e02c      	b.n	8003068 <UART_SetConfig+0x348>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a72      	ldr	r2, [pc, #456]	; (80031dc <UART_SetConfig+0x4bc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d125      	bne.n	8003064 <UART_SetConfig+0x344>
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <UART_SetConfig+0x4c0>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003022:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003026:	d017      	beq.n	8003058 <UART_SetConfig+0x338>
 8003028:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800302c:	d817      	bhi.n	800305e <UART_SetConfig+0x33e>
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003032:	d00b      	beq.n	800304c <UART_SetConfig+0x32c>
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003038:	d811      	bhi.n	800305e <UART_SetConfig+0x33e>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <UART_SetConfig+0x326>
 800303e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003042:	d006      	beq.n	8003052 <UART_SetConfig+0x332>
 8003044:	e00b      	b.n	800305e <UART_SetConfig+0x33e>
 8003046:	2300      	movs	r3, #0
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e00d      	b.n	8003068 <UART_SetConfig+0x348>
 800304c:	2302      	movs	r3, #2
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e00a      	b.n	8003068 <UART_SetConfig+0x348>
 8003052:	2304      	movs	r3, #4
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e007      	b.n	8003068 <UART_SetConfig+0x348>
 8003058:	2308      	movs	r3, #8
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e004      	b.n	8003068 <UART_SetConfig+0x348>
 800305e:	2310      	movs	r3, #16
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e001      	b.n	8003068 <UART_SetConfig+0x348>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003070:	d15b      	bne.n	800312a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d828      	bhi.n	80030ca <UART_SetConfig+0x3aa>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0x360>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030b5 	.word	0x080030b5
 800308c:	080030cb 	.word	0x080030cb
 8003090:	080030bb 	.word	0x080030bb
 8003094:	080030cb 	.word	0x080030cb
 8003098:	080030cb 	.word	0x080030cb
 800309c:	080030cb 	.word	0x080030cb
 80030a0:	080030c3 	.word	0x080030c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7fe fe48 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80030a8:	61b8      	str	r0, [r7, #24]
        break;
 80030aa:	e013      	b.n	80030d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7fe fe58 	bl	8001d60 <HAL_RCC_GetPCLK2Freq>
 80030b0:	61b8      	str	r0, [r7, #24]
        break;
 80030b2:	e00f      	b.n	80030d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <UART_SetConfig+0x4c4>)
 80030b6:	61bb      	str	r3, [r7, #24]
        break;
 80030b8:	e00c      	b.n	80030d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ba:	f7fe fd2b 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 80030be:	61b8      	str	r0, [r7, #24]
        break;
 80030c0:	e008      	b.n	80030d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c6:	61bb      	str	r3, [r7, #24]
        break;
 80030c8:	e004      	b.n	80030d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	77bb      	strb	r3, [r7, #30]
        break;
 80030d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d074      	beq.n	80031c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	005a      	lsls	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d916      	bls.n	8003124 <UART_SetConfig+0x404>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d212      	bcs.n	8003124 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f023 030f 	bic.w	r3, r3, #15
 8003106:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	b29a      	uxth	r2, r3
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	4313      	orrs	r3, r2
 8003118:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	89fa      	ldrh	r2, [r7, #14]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e04f      	b.n	80031c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	77bb      	strb	r3, [r7, #30]
 8003128:	e04c      	b.n	80031c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d828      	bhi.n	8003182 <UART_SetConfig+0x462>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x418>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7fe fdec 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e013      	b.n	800318c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7fe fdfc 	bl	8001d60 <HAL_RCC_GetPCLK2Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e00f      	b.n	800318c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <UART_SetConfig+0x4c4>)
 800316e:	61bb      	str	r3, [r7, #24]
        break;
 8003170:	e00c      	b.n	800318c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7fe fccf 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8003176:	61b8      	str	r0, [r7, #24]
        break;
 8003178:	e008      	b.n	800318c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e004      	b.n	800318c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	77bb      	strb	r3, [r7, #30]
        break;
 800318a:	bf00      	nop
    }

    if (pclk != 0U)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d018      	beq.n	80031c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085a      	lsrs	r2, r3, #1
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	441a      	add	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d909      	bls.n	80031c0 <UART_SetConfig+0x4a0>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b2:	d205      	bcs.n	80031c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	e001      	b.n	80031c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40007c00 	.word	0x40007c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	00f42400 	.word	0x00f42400

080031e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01a      	beq.n	80032fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e6:	d10a      	bne.n	80032fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800333c:	f7fd fc8a 	bl	8000c54 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10e      	bne.n	800336e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f831 	bl	80033c6 <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e027      	b.n	80033be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d10e      	bne.n	800339a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f81b 	bl	80033c6 <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e011      	b.n	80033be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b09c      	sub	sp, #112	; 0x70
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d6:	e0a7      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	f000 80a3 	beq.w	8003528 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fd fc37 	bl	8000c54 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80033f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d13f      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800340c:	667b      	str	r3, [r7, #100]	; 0x64
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003418:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800341c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e6      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3308      	adds	r3, #8
 8003448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800344a:	64ba      	str	r2, [r7, #72]	; 0x48
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e5      	bne.n	800342a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e068      	b.n	800354a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d050      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003494:	d148      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800349e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
 80034c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e6      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	613b      	str	r3, [r7, #16]
   return(result);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3308      	adds	r3, #8
 80034f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034f2:	623a      	str	r2, [r7, #32]
 80034f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69f9      	ldr	r1, [r7, #28]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e010      	b.n	800354a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	f43f af48 	beq.w	80033d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3770      	adds	r7, #112	; 0x70
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b097      	sub	sp, #92	; 0x5c
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d10e      	bne.n	80035a6 <UART_Start_Receive_IT+0x52>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <UART_Start_Receive_IT+0x48>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800359a:	e02d      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a4:	e028      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <UART_Start_Receive_IT+0x76>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <UART_Start_Receive_IT+0x6c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035be:	e01b      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	227f      	movs	r2, #127	; 0x7f
 80035c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c8:	e016      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d2:	d10d      	bne.n	80035f0 <UART_Start_Receive_IT+0x9c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <UART_Start_Receive_IT+0x92>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	227f      	movs	r2, #127	; 0x7f
 80035e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e4:	e008      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	223f      	movs	r2, #63	; 0x3f
 80035ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ee:	e003      	b.n	80035f8 <UART_Start_Receive_IT+0xa4>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2222      	movs	r2, #34	; 0x22
 8003604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3308      	adds	r3, #8
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	657b      	str	r3, [r7, #84]	; 0x54
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3308      	adds	r3, #8
 8003626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003628:	64ba      	str	r2, [r7, #72]	; 0x48
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800362e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e5      	bne.n	8003608 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d107      	bne.n	8003656 <UART_Start_Receive_IT+0x102>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <UART_Start_Receive_IT+0x184>)
 8003652:	669a      	str	r2, [r3, #104]	; 0x68
 8003654:	e002      	b.n	800365c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <UART_Start_Receive_IT+0x188>)
 800365a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e6      	bne.n	8003664 <UART_Start_Receive_IT+0x110>
 8003696:	e018      	b.n	80036ca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	613b      	str	r3, [r7, #16]
   return(result);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	69f9      	ldr	r1, [r7, #28]
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e6      	bne.n	8003698 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	375c      	adds	r7, #92	; 0x5c
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	0800398f 	.word	0x0800398f
 80036dc:	08003829 	.word	0x08003829

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b095      	sub	sp, #84	; 0x54
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003706:	643b      	str	r3, [r7, #64]	; 0x40
 8003708:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800370c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e6      	bne.n	80036e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	61fb      	str	r3, [r7, #28]
   return(result);
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	64bb      	str	r3, [r7, #72]	; 0x48
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e5      	bne.n	800371a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	2b01      	cmp	r3, #1
 8003754:	d118      	bne.n	8003788 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	60bb      	str	r3, [r7, #8]
   return(result);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 0310 	bic.w	r3, r3, #16
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6979      	ldr	r1, [r7, #20]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	613b      	str	r3, [r7, #16]
   return(result);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e6      	bne.n	8003756 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800379c:	bf00      	nop
 800379e:	3754      	adds	r7, #84	; 0x54
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fa8a 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e6      	bne.n	80037dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fa56 	bl	8002ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003820:	bf00      	nop
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b096      	sub	sp, #88	; 0x58
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003836:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003840:	2b22      	cmp	r3, #34	; 0x22
 8003842:	f040 8098 	bne.w	8003976 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003850:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003854:	b2d9      	uxtb	r1, r3
 8003856:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	400a      	ands	r2, r1
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d17b      	bne.n	8003986 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a2:	653b      	str	r3, [r7, #80]	; 0x50
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
 80038ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e6      	bne.n	800388e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	623b      	str	r3, [r7, #32]
   return(result);
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038e0:	633a      	str	r2, [r7, #48]	; 0x30
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e5      	bne.n	80038c0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	2b01      	cmp	r3, #1
 800390e:	d12e      	bne.n	800396e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	60fb      	str	r3, [r7, #12]
   return(result);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	69b9      	ldr	r1, [r7, #24]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	617b      	str	r3, [r7, #20]
   return(result);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b10      	cmp	r3, #16
 8003954:	d103      	bne.n	800395e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2210      	movs	r2, #16
 800395c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff f9c4 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800396c:	e00b      	b.n	8003986 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fc ffe4 	bl	800093c <HAL_UART_RxCpltCallback>
}
 8003974:	e007      	b.n	8003986 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0208 	orr.w	r2, r2, #8
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	3758      	adds	r7, #88	; 0x58
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b096      	sub	sp, #88	; 0x58
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800399c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	f040 8098 	bne.w	8003adc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80039bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80039c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d17b      	bne.n	8003aec <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
 8003a14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e6      	bne.n	80039f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12e      	bne.n	8003ad4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f023 0310 	bic.w	r3, r3, #16
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6979      	ldr	r1, [r7, #20]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e6      	bne.n	8003a7c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d103      	bne.n	8003ac4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff f911 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ad2:	e00b      	b.n	8003aec <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fc ff31 	bl	800093c <HAL_UART_RxCpltCallback>
}
 8003ada:	e007      	b.n	8003aec <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	619a      	str	r2, [r3, #24]
}
 8003aec:	bf00      	nop
 8003aee:	3758      	adds	r7, #88	; 0x58
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 f820 	bl	8003b4c <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08003b84 	.word	0x08003b84
 8003b30:	08003b84 	.word	0x08003b84
 8003b34:	08003b84 	.word	0x08003b84
 8003b38:	08003b88 	.word	0x08003b88

08003b3c <memset>:
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <_init>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr

08003b58 <_fini>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr
