
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000509c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800546c  0800546c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005474  08005474  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000070  080054ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080054ec  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b60  00000000  00000000  0002badd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027087  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b380  00000000  00000000  0005570f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b22  00000000  00000000  00060a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001525b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  00152604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005284 	.word	0x08005284

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005284 	.word	0x08005284

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <uart_print+0x2c>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000604:	bf00      	nop
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <uart_print+0x2c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <uart_print+0x12>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40004800 	.word	0x40004800

08000624 <char_is_endmessage>:
	}
	else return 0;
}

uint8_t char_is_endmessage(char c)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d002      	beq.n	800063a <char_is_endmessage+0x16>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d101      	bne.n	800063e <char_is_endmessage+0x1a>
	{
		return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <char_is_endmessage+0x1c>
	}
	else return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <rx_has_data>:

// --- Reception ---
uint8_t rx_has_data()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <rx_has_data+0x24>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <rx_has_data+0x28>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	429a      	cmp	r2, r3
 800065e:	d101      	bne.n	8000664 <rx_has_data+0x18>
	{
		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <rx_has_data+0x1a>
	}
	else return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000400 	.word	0x20000400
 8000674:	20000402 	.word	0x20000402

08000678 <increase_rx_empty>:

void increase_rx_empty()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	rx_empty++;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <increase_rx_empty+0x2c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <increase_rx_empty+0x2c>)
 8000688:	801a      	strh	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <increase_rx_empty+0x2c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	2b63      	cmp	r3, #99	; 0x63
 8000692:	d902      	bls.n	800069a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <increase_rx_empty+0x2c>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
	}
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000400 	.word	0x20000400

080006a8 <increase_rx_busy>:

void increase_rx_busy()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	rx_busy++;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <increase_rx_busy+0x2c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <increase_rx_busy+0x2c>)
 80006b8:	801a      	strh	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <increase_rx_busy+0x2c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2b63      	cmp	r3, #99	; 0x63
 80006c2:	d902      	bls.n	80006ca <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <increase_rx_busy+0x2c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	20000402 	.word	0x20000402

080006d8 <tx_has_data>:

// --- Transmission ---
uint8_t tx_has_data()
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <tx_has_data+0x24>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <tx_has_data+0x28>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d101      	bne.n	80006f0 <tx_has_data+0x18>
	{
		return 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <tx_has_data+0x1a>
	}
	else return 1;
 80006f0:	2301      	movs	r3, #1
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000468 	.word	0x20000468
 8000700:	2000046a 	.word	0x2000046a

08000704 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	tx_busy++;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <increase_tx_busy+0x2c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <increase_tx_busy+0x2c>)
 8000714:	801a      	strh	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <increase_tx_busy+0x2c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	2b63      	cmp	r3, #99	; 0x63
 800071e:	d902      	bls.n	8000726 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <increase_tx_busy+0x2c>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
	}
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	2000046a 	.word	0x2000046a

08000734 <char_is_frame_start_end>:

// Check for frame start and frame end characters
uint8_t char_is_frame_start_end(char c)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if (c == '#' || c == ';')
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b23      	cmp	r3, #35	; 0x23
 8000742:	d002      	beq.n	800074a <char_is_frame_start_end+0x16>
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b3b      	cmp	r3, #59	; 0x3b
 8000748:	d101      	bne.n	800074e <char_is_frame_start_end+0x1a>
	{
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <char_is_frame_start_end+0x1c>
	}
	else return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <clear_array>:

// Clear array
uint16_t clear_array(char *array, uint16_t array_length)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	// Reset array content
	for (uint16_t i=0; i<=array_length; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	81fb      	strh	r3, [r7, #14]
 800076c:	e007      	b.n	800077e <clear_array+0x22>
		array[i] = '\000';
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i<=array_length; i++)
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	3301      	adds	r3, #1
 800077c:	81fb      	strh	r3, [r7, #14]
 800077e:	89fa      	ldrh	r2, [r7, #14]
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	429a      	cmp	r2, r3
 8000784:	d9f3      	bls.n	800076e <clear_array+0x12>

	// Reset array length
	array_length = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	807b      	strh	r3, [r7, #2]
	return array_length;
 800078a:	887b      	ldrh	r3, [r7, #2]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <get_char+0x24>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <get_char+0x28>)
 80007a8:	5c9b      	ldrb	r3, [r3, r2]
 80007aa:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 80007ac:	f7ff ff7c 	bl	80006a8 <increase_rx_busy>
	return tmp;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000402 	.word	0x20000402
 80007c0:	2000039c 	.word	0x2000039c

080007c4 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 80007d0:	e041      	b.n	8000856 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <get_message+0xa8>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	461c      	mov	r4, r3
 80007d8:	f7ff ffde 	bl	8000798 <get_char>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <get_message+0xac>)
 80007e2:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <get_message+0xa8>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <get_message+0xac>)
 80007ec:	5c9b      	ldrb	r3, [r3, r2]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff18 	bl	8000624 <char_is_endmessage>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d021      	beq.n	800083e <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <get_message+0xa8>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <get_message+0xac>)
 8000802:	2100      	movs	r1, #0
 8000804:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	e009      	b.n	8000820 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 800080c:	7bfa      	ldrb	r2, [r7, #15]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	440b      	add	r3, r1
 8000814:	4916      	ldr	r1, [pc, #88]	; (8000870 <get_message+0xac>)
 8000816:	5c8a      	ldrb	r2, [r1, r2]
 8000818:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3301      	adds	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <get_message+0xa8>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3ef      	bcc.n	800080c <get_message+0x48>
			}

			message_length = idx;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <get_message+0xa8>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <get_message+0xa8>)
 8000834:	2200      	movs	r2, #0
 8000836:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	b29b      	uxth	r3, r3
 800083c:	e011      	b.n	8000862 <get_message+0x9e>
		}
		else
		{
			idx++;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <get_message+0xa8>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <get_message+0xa8>)
 8000848:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <get_message+0xa8>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2b64      	cmp	r3, #100	; 0x64
 8000850:	d901      	bls.n	8000856 <get_message+0x92>
 8000852:	2300      	movs	r3, #0
 8000854:	e005      	b.n	8000862 <get_message+0x9e>
	while(rx_has_data() == 1)
 8000856:	f7ff fef9 	bl	800064c <rx_has_data>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d0b8      	beq.n	80007d2 <get_message+0xe>
		}
	}
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	bf00      	nop
 800086c:	2000046c 	.word	0x2000046c
 8000870:	20000470 	.word	0x20000470

08000874 <return_message>:

// Send response from STM
void return_message(char *message, ...)
{
 8000874:	b40f      	push	{r0, r1, r2, r3}
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b09d      	sub	sp, #116	; 0x74
 800087a:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 800087c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000880:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800088c:	4618      	mov	r0, r3
 800088e:	f004 f8a1 	bl	80049d4 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <return_message+0xd4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 800089a:	2300      	movs	r3, #0
 800089c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80008a0:	e01a      	b.n	80008d8 <return_message+0x64>
	{
		tx_buffer[idx] = response[i];
 80008a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80008a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80008aa:	3270      	adds	r2, #112	; 0x70
 80008ac:	443a      	add	r2, r7
 80008ae:	f812 1c68 	ldrb.w	r1, [r2, #-104]
 80008b2:	4a26      	ldr	r2, [pc, #152]	; (800094c <return_message+0xd8>)
 80008b4:	54d1      	strb	r1, [r2, r3]
		idx++;
 80008b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80008ba:	3301      	adds	r3, #1
 80008bc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if (idx >= BUFFER_LENGTH)
 80008c0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80008c4:	2b63      	cmp	r3, #99	; 0x63
 80008c6:	d902      	bls.n	80008ce <return_message+0x5a>
			idx = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	for (uint16_t i=0; i<strlen(response); i++)
 80008ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80008d2:	3301      	adds	r3, #1
 80008d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80008d8:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fcad 	bl	8000240 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	429c      	cmp	r4, r3
 80008ea:	d3da      	bcc.n	80008a2 <return_message+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 80008f0:	f7ff fef2 	bl	80006d8 <tx_has_data>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d118      	bne.n	800092c <return_message+0xb8>
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <return_message+0xdc>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000904:	2b80      	cmp	r3, #128	; 0x80
 8000906:	d111      	bne.n	800092c <return_message+0xb8>
	{
		tx_empty = idx;
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <return_message+0xd4>)
 800090a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800090e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <return_message+0xe0>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <return_message+0xd8>)
 800091a:	4413      	add	r3, r2
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <return_message+0xdc>)
 8000922:	f002 fc21 	bl	8003168 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000926:	f7ff feed 	bl	8000704 <increase_tx_busy>
 800092a:	e003      	b.n	8000934 <return_message+0xc0>
	}
	else
		tx_empty = idx;
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <return_message+0xd4>)
 800092e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000932:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000934:	b662      	cpsie	i
}
 8000936:	bf00      	nop

	__enable_irq();
}
 8000938:	bf00      	nop
 800093a:	3774      	adds	r7, #116	; 0x74
 800093c:	46bd      	mov	sp, r7
 800093e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000942:	b004      	add	sp, #16
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000468 	.word	0x20000468
 800094c:	20000404 	.word	0x20000404
 8000950:	2000008c 	.word	0x2000008c
 8000954:	2000046a 	.word	0x2000046a

08000958 <analyze_frame>:

// Analyze frame content
uint8_t analyze_frame(char *message)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b09f      	sub	sp, #124	; 0x7c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	// Store last analyzed char position
	__IO uint16_t collection_index = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Save frame-check state
	__IO uint8_t sw_state = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	// Check for '#' and ';' characters in received message
	char *frame_begin;
	char *frame_end;

	frame_begin = strchr(message, '#');
 800096c:	2123      	movs	r1, #35	; 0x23
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f003 ff80 	bl	8004874 <strchr>
 8000974:	66b8      	str	r0, [r7, #104]	; 0x68
	frame_end = strchr(message, ';');
 8000976:	213b      	movs	r1, #59	; 0x3b
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f003 ff7b 	bl	8004874 <strchr>
 800097e:	6678      	str	r0, [r7, #100]	; 0x64

	if (frame_begin == NULL || frame_end == NULL)
 8000980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <analyze_frame+0x34>
 8000986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <analyze_frame+0x3e>
	{
		return_message("NOFRAMECHARS\r\n");
 800098c:	48b6      	ldr	r0, [pc, #728]	; (8000c68 <analyze_frame+0x310>)
 800098e:	f7ff ff71 	bl	8000874 <return_message>
		return 0;
 8000992:	2300      	movs	r3, #0
 8000994:	e33d      	b.n	8001012 <analyze_frame+0x6ba>
	}

	// Set frame status to incomplete
	frame_complete = 0;
 8000996:	4bb5      	ldr	r3, [pc, #724]	; (8000c6c <analyze_frame+0x314>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

	while (frame_complete != 1)
 800099c:	e32b      	b.n	8000ff6 <analyze_frame+0x69e>
	{
		switch (sw_state)
 800099e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b06      	cmp	r3, #6
 80009a6:	f200 8326 	bhi.w	8000ff6 <analyze_frame+0x69e>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <analyze_frame+0x58>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009f1 	.word	0x080009f1
 80009b4:	08000a55 	.word	0x08000a55
 80009b8:	08000b33 	.word	0x08000b33
 80009bc:	08000c11 	.word	0x08000c11
 80009c0:	08000d4f 	.word	0x08000d4f
 80009c4:	08000ea5 	.word	0x08000ea5
 80009c8:	08000fbd 	.word	0x08000fbd
		{
		case 0:
			// Skip any character before '#' is found
			while (message[collection_index] != '#')
			{
				if (message[collection_index] == '\0')
 80009cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <analyze_frame+0x8a>
					return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e317      	b.n	8001012 <analyze_frame+0x6ba>
				else
					collection_index++;
 80009e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			while (message[collection_index] != '#')
 80009f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b23      	cmp	r3, #35	; 0x23
 8000a00:	d1e4      	bne.n	80009cc <analyze_frame+0x74>
			}

			// Get frame start char ( '#' )
			while (message[collection_index] == '#')
 8000a02:	e01a      	b.n	8000a3a <analyze_frame+0xe2>
			{
				if (message[collection_index+1] == ';' && message[collection_index+2] == '\0')
 8000a04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b3b      	cmp	r3, #59	; 0x3b
 8000a14:	d10a      	bne.n	8000a2c <analyze_frame+0xd4>
 8000a16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <analyze_frame+0xd4>
					return 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e2f2      	b.n	8001012 <analyze_frame+0x6ba>
				else
					collection_index++;
 8000a2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			while (message[collection_index] == '#')
 8000a3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b23      	cmp	r3, #35	; 0x23
 8000a4a:	d0db      	beq.n	8000a04 <analyze_frame+0xac>
			}

			// Change sw_state
			sw_state = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			break;
 8000a52:	e2d0      	b.n	8000ff6 <analyze_frame+0x69e>

		case 1:
			// Get sender
			for (uint8_t i=0; i<3; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000a5a:	e05c      	b.n	8000b16 <analyze_frame+0x1be>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 8000a5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe62 	bl	8000734 <char_is_frame_start_end>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d008      	beq.n	8000a88 <analyze_frame+0x130>
 8000a76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b20      	cmp	r3, #32
 8000a86:	d115      	bne.n	8000ab4 <analyze_frame+0x15c>
				{
					// Send [CHECKSENDER] message
					char CHECKSENDER[] = "CHECKSENDER\r\n";
 8000a88:	4b79      	ldr	r3, [pc, #484]	; (8000c70 <analyze_frame+0x318>)
 8000a8a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a90:	c407      	stmia	r4!, {r0, r1, r2}
 8000a92:	8023      	strh	r3, [r4, #0]
					return_message(CHECKSENDER);
 8000a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff feeb 	bl	8000874 <return_message>
					while (i<3)
 8000a9e:	e004      	b.n	8000aaa <analyze_frame+0x152>
						i++;
 8000aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					while (i<3)
 8000aaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d9f6      	bls.n	8000aa0 <analyze_frame+0x148>
				{
 8000ab2:	e02b      	b.n	8000b0c <analyze_frame+0x1b4>
//					return_message(message[collection_index]);
//					return 0;
				}
				else if (i == 2)
 8000ab4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d115      	bne.n	8000ae8 <analyze_frame+0x190>
				{
					sender[i] = message[collection_index];
 8000abc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000acc:	7811      	ldrb	r1, [r2, #0]
 8000ace:	4a69      	ldr	r2, [pc, #420]	; (8000c74 <analyze_frame+0x31c>)
 8000ad0:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000ad2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					sw_state = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000ae6:	e011      	b.n	8000b0c <analyze_frame+0x1b4>
				}
				else
				{
					sender[i] = message[collection_index];
 8000ae8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	441a      	add	r2, r3
 8000af4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000af8:	7811      	ldrb	r1, [r2, #0]
 8000afa:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <analyze_frame+0x31c>)
 8000afc:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000afe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			for (uint8_t i=0; i<3; i++)
 8000b0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b10:	3301      	adds	r3, #1
 8000b12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000b16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d99e      	bls.n	8000a5c <analyze_frame+0x104>
				}
			}

			if (sw_state == 1)
 8000b1e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	f040 8266 	bne.w	8000ff6 <analyze_frame+0x69e>
				// Reset sw_state
				sw_state = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			break;
 8000b30:	e261      	b.n	8000ff6 <analyze_frame+0x69e>

		case 2:
			// Get receiver
			for (uint8_t i=0; i<3; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000b38:	e05c      	b.n	8000bf4 <analyze_frame+0x29c>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 8000b3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fdf3 	bl	8000734 <char_is_frame_start_end>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d008      	beq.n	8000b66 <analyze_frame+0x20e>
 8000b54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b20      	cmp	r3, #32
 8000b64:	d115      	bne.n	8000b92 <analyze_frame+0x23a>
				{
					// Send [CHECKRECEIVER] message
					char CHECKRECEIVER[] = "CHECKRECEIVER\r\n";
 8000b66:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <analyze_frame+0x320>)
 8000b68:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					return_message(CHECKRECEIVER);
 8000b72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe7c 	bl	8000874 <return_message>
					while (i<3)
 8000b7c:	e004      	b.n	8000b88 <analyze_frame+0x230>
						i++;
 8000b7e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000b82:	3301      	adds	r3, #1
 8000b84:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					while (i<3)
 8000b88:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d9f6      	bls.n	8000b7e <analyze_frame+0x226>
				{
 8000b90:	e02b      	b.n	8000bea <analyze_frame+0x292>

//					return_message(message[collection_index]);
//					return 0;
				}
				else if (i == 2)
 8000b92:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d115      	bne.n	8000bc6 <analyze_frame+0x26e>
				{
					receiver[i] = message[collection_index];
 8000b9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000baa:	7811      	ldrb	r1, [r2, #0]
 8000bac:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <analyze_frame+0x324>)
 8000bae:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000bb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					sw_state = 3;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000bc4:	e011      	b.n	8000bea <analyze_frame+0x292>
				}
				else
				{
					receiver[i] = message[collection_index];
 8000bc6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000bd6:	7811      	ldrb	r1, [r2, #0]
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <analyze_frame+0x324>)
 8000bda:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000bdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3301      	adds	r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			for (uint8_t i=0; i<3; i++)
 8000bea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000bf4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d99e      	bls.n	8000b3a <analyze_frame+0x1e2>
				}

			}

			if (sw_state == 2)
 8000bfc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	f040 81f7 	bne.w	8000ff6 <analyze_frame+0x69e>
				// Reset sw_state
				sw_state = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			break;
 8000c0e:	e1f2      	b.n	8000ff6 <analyze_frame+0x69e>

		case 3:
			// Get command length
			for (uint8_t i=0; i<3; i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000c16:	e066      	b.n	8000ce6 <analyze_frame+0x38e>
			{
				if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000c18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b2f      	cmp	r3, #47	; 0x2f
 8000c28:	d908      	bls.n	8000c3c <analyze_frame+0x2e4>
 8000c2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b39      	cmp	r3, #57	; 0x39
 8000c3a:	d923      	bls.n	8000c84 <analyze_frame+0x32c>
				{
					// Send [CHECKLENGTH] message
					char CHECKLENGTH[] = "CHECKLENGTH\r\n";
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <analyze_frame+0x328>)
 8000c3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c44:	c407      	stmia	r4!, {r0, r1, r2}
 8000c46:	8023      	strh	r3, [r4, #0]
					return_message(CHECKLENGTH);
 8000c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe11 	bl	8000874 <return_message>
					while (i<3)
 8000c52:	e004      	b.n	8000c5e <analyze_frame+0x306>
						i++;
 8000c54:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					while (i<3)
 8000c5e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d9f6      	bls.n	8000c54 <analyze_frame+0x2fc>
				{
 8000c66:	e039      	b.n	8000cdc <analyze_frame+0x384>
 8000c68:	0800529c 	.word	0x0800529c
 8000c6c:	2000038f 	.word	0x2000038f
 8000c70:	080052ac 	.word	0x080052ac
 8000c74:	20000180 	.word	0x20000180
 8000c78:	080052bc 	.word	0x080052bc
 8000c7c:	20000184 	.word	0x20000184
 8000c80:	080052cc 	.word	0x080052cc

//					return 0;
				}
				else if (i == 2)
 8000c84:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d115      	bne.n	8000cb8 <analyze_frame+0x360>
				{
					command_chars[i] = message[collection_index];
 8000c8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	441a      	add	r2, r3
 8000c98:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c9c:	7811      	ldrb	r1, [r2, #0]
 8000c9e:	4aa4      	ldr	r2, [pc, #656]	; (8000f30 <analyze_frame+0x5d8>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000ca2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					sw_state = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000cb6:	e011      	b.n	8000cdc <analyze_frame+0x384>
				}
				else
				{
					command_chars[i] = message[collection_index];
 8000cb8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	441a      	add	r2, r3
 8000cc4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000cc8:	7811      	ldrb	r1, [r2, #0]
 8000cca:	4a99      	ldr	r2, [pc, #612]	; (8000f30 <analyze_frame+0x5d8>)
 8000ccc:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000cce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			for (uint8_t i=0; i<3; i++)
 8000cdc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000ce6:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d994      	bls.n	8000c18 <analyze_frame+0x2c0>
				}
			}

			// Get data field length as integer value
			// Use length to get characters from 'data' array in next step
			command_length = atoi(command_chars);
 8000cee:	4890      	ldr	r0, [pc, #576]	; (8000f30 <analyze_frame+0x5d8>)
 8000cf0:	f003 fd89 	bl	8004806 <atoi>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <analyze_frame+0x5dc>)
 8000cfa:	801a      	strh	r2, [r3, #0]

			if (command_length > MAX_DATA_LENGTH)
 8000cfc:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <analyze_frame+0x5dc>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d06:	d90d      	bls.n	8000d24 <analyze_frame+0x3cc>
			{
				// Send [DATAOVERFLOW] message
				char DATAOVERFLOW[] = "DATAOVERFLOW\r\n";
 8000d08:	4b8b      	ldr	r3, [pc, #556]	; (8000f38 <analyze_frame+0x5e0>)
 8000d0a:	f107 0420 	add.w	r4, r7, #32
 8000d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d10:	c407      	stmia	r4!, {r0, r1, r2}
 8000d12:	8023      	strh	r3, [r4, #0]
 8000d14:	3402      	adds	r4, #2
 8000d16:	0c1b      	lsrs	r3, r3, #16
 8000d18:	7023      	strb	r3, [r4, #0]
				return_message(DATAOVERFLOW);
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fda8 	bl	8000874 <return_message>
//				return 0;
			}

			// Pass command length to the variable outside the function
			data_len = command_length;
 8000d24:	4b83      	ldr	r3, [pc, #524]	; (8000f34 <analyze_frame+0x5dc>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b84      	ldr	r3, [pc, #528]	; (8000f3c <analyze_frame+0x5e4>)
 8000d2c:	801a      	strh	r2, [r3, #0]

			if (sw_state == 3 || command_length > MAX_DATA_LENGTH)
 8000d2e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d006      	beq.n	8000d46 <analyze_frame+0x3ee>
 8000d38:	4b7e      	ldr	r3, [pc, #504]	; (8000f34 <analyze_frame+0x5dc>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d42:	f240 8158 	bls.w	8000ff6 <analyze_frame+0x69e>
				// Reset sw_state
				sw_state = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			break;
 8000d4c:	e153      	b.n	8000ff6 <analyze_frame+0x69e>

		case 4:
			// Get data
			if (command_length == 0)
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <analyze_frame+0x5dc>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <analyze_frame+0x408>
			{
				sw_state = 5;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				break;
 8000d5e:	e14a      	b.n	8000ff6 <analyze_frame+0x69e>
			}

			for (uint16_t i=0; i<command_length; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8000d66:	e05a      	b.n	8000e1e <analyze_frame+0x4c6>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1)
 8000d68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fcdc 	bl	8000734 <char_is_frame_start_end>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d118      	bne.n	8000db4 <analyze_frame+0x45c>
				{
					// Send [CHECKDATA] message
					char CHECKDATA[] = "CHECKDATA\r\n";
 8000d82:	4a6f      	ldr	r2, [pc, #444]	; (8000f40 <analyze_frame+0x5e8>)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					return_message(CHECKDATA);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fd6e 	bl	8000874 <return_message>
					while (i<command_length)
 8000d98:	e004      	b.n	8000da4 <analyze_frame+0x44c>
						i++;
 8000d9a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
					while (i<command_length)
 8000da4:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <analyze_frame+0x5dc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f3      	bcc.n	8000d9a <analyze_frame+0x442>
 8000db2:	e02f      	b.n	8000e14 <analyze_frame+0x4bc>

//					return 0;
				}
				else if (i == (command_length-1))
 8000db4:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000db8:	4b5e      	ldr	r3, [pc, #376]	; (8000f34 <analyze_frame+0x5dc>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d115      	bne.n	8000df0 <analyze_frame+0x498>
				{
					data[i] = message[collection_index];
 8000dc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	441a      	add	r2, r3
 8000dd0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000dd4:	7811      	ldrb	r1, [r2, #0]
 8000dd6:	4a5b      	ldr	r2, [pc, #364]	; (8000f44 <analyze_frame+0x5ec>)
 8000dd8:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000dda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					sw_state = 5;
 8000de8:	2305      	movs	r3, #5
 8000dea:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000dee:	e011      	b.n	8000e14 <analyze_frame+0x4bc>
				}
				else
				{
					data[i] = message[collection_index];
 8000df0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000e00:	7811      	ldrb	r1, [r2, #0]
 8000e02:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <analyze_frame+0x5ec>)
 8000e04:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000e06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			for (uint16_t i=0; i<command_length; i++)
 8000e14:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8000e1e:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <analyze_frame+0x5dc>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d39d      	bcc.n	8000d68 <analyze_frame+0x410>
				}
			}

			// Convert command to checksum value
			for (uint16_t i=0; i<command_length; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8000e32:	e010      	b.n	8000e56 <analyze_frame+0x4fe>
				command_checksum += data[i];
 8000e34:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000e38:	4a42      	ldr	r2, [pc, #264]	; (8000f44 <analyze_frame+0x5ec>)
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <analyze_frame+0x5f0>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <analyze_frame+0x5f0>)
 8000e4a:	801a      	strh	r2, [r3, #0]
			for (uint16_t i=0; i<command_length; i++)
 8000e4c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000e50:	3301      	adds	r3, #1
 8000e52:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <analyze_frame+0x5dc>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3e7      	bcc.n	8000e34 <analyze_frame+0x4dc>
			command_checksum %= 1000;
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <analyze_frame+0x5f0>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <analyze_frame+0x5f4>)
 8000e6c:	fba2 1203 	umull	r1, r2, r2, r3
 8000e70:	0992      	lsrs	r2, r2, #6
 8000e72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e76:	fb01 f202 	mul.w	r2, r1, r2
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <analyze_frame+0x5f0>)
 8000e80:	801a      	strh	r2, [r3, #0]

			if (sw_state == 4)
 8000e82:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	f040 80b4 	bne.w	8000ff6 <analyze_frame+0x69e>
			{
				// Clear data array
				clear_array(data, data_len);
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <analyze_frame+0x5e4>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	482b      	ldr	r0, [pc, #172]	; (8000f44 <analyze_frame+0x5ec>)
 8000e98:	f7ff fc60 	bl	800075c <clear_array>

				// Reset sw_state
				sw_state = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			}
			break;
 8000ea2:	e0a8      	b.n	8000ff6 <analyze_frame+0x69e>

		case 5:
			// Get checksum
			for (uint8_t i=0; i<3; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000eaa:	e06c      	b.n	8000f86 <analyze_frame+0x62e>
			{
				if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000eac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b2f      	cmp	r3, #47	; 0x2f
 8000ebc:	d908      	bls.n	8000ed0 <analyze_frame+0x578>
 8000ebe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b39      	cmp	r3, #57	; 0x39
 8000ece:	d915      	bls.n	8000efc <analyze_frame+0x5a4>
				{
					// Send [CHECKCSUM] message
					char CHECKCSUM[] = "CHECKCSUM\r\n";
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <analyze_frame+0x5f8>)
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					return_message(CHECKCSUM);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fcc7 	bl	8000874 <return_message>
					while (i<3)
 8000ee6:	e004      	b.n	8000ef2 <analyze_frame+0x59a>
						i++;
 8000ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					while (i<3)
 8000ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d9f6      	bls.n	8000ee8 <analyze_frame+0x590>
				{
 8000efa:	e03f      	b.n	8000f7c <analyze_frame+0x624>

//					return 0;
				}
				else if (i == 2)
 8000efc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d129      	bne.n	8000f58 <analyze_frame+0x600>
				{
					checksum[i] = message[collection_index];
 8000f04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	441a      	add	r2, r3
 8000f10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <analyze_frame+0x5fc>)
 8000f18:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000f1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					sw_state = 6;
 8000f28:	2306      	movs	r3, #6
 8000f2a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000f2e:	e025      	b.n	8000f7c <analyze_frame+0x624>
 8000f30:	20000188 	.word	0x20000188
 8000f34:	20000392 	.word	0x20000392
 8000f38:	080052dc 	.word	0x080052dc
 8000f3c:	20000398 	.word	0x20000398
 8000f40:	080052ec 	.word	0x080052ec
 8000f44:	2000018c 	.word	0x2000018c
 8000f48:	20000396 	.word	0x20000396
 8000f4c:	10624dd3 	.word	0x10624dd3
 8000f50:	080052f8 	.word	0x080052f8
 8000f54:	2000038c 	.word	0x2000038c
				}
				else
				{
					checksum[i] = message[collection_index];
 8000f58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	441a      	add	r2, r3
 8000f64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f68:	7811      	ldrb	r1, [r2, #0]
 8000f6a:	4a2c      	ldr	r2, [pc, #176]	; (800101c <analyze_frame+0x6c4>)
 8000f6c:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000f6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			for (uint8_t i=0; i<3; i++)
 8000f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f80:	3301      	adds	r3, #1
 8000f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d98e      	bls.n	8000eac <analyze_frame+0x554>
				}
			}

			// Convert array content to checksum value
			checksum_value = atoi(checksum);
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <analyze_frame+0x6c4>)
 8000f90:	f003 fc39 	bl	8004806 <atoi>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <analyze_frame+0x6c8>)
 8000f9a:	801a      	strh	r2, [r3, #0]

			if (sw_state == 5)
 8000f9c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	d127      	bne.n	8000ff6 <analyze_frame+0x69e>
			{
				// Clear data array
				clear_array(data, data_len);
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <analyze_frame+0x6cc>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <analyze_frame+0x6d0>)
 8000fb0:	f7ff fbd4 	bl	800075c <clear_array>

				// Reset sw_state
				sw_state = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			}
			break;
 8000fba:	e01c      	b.n	8000ff6 <analyze_frame+0x69e>

		case 6:
			// Get frame end char ( ';' )
			if (message[collection_index] == ';')
 8000fbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b3b      	cmp	r3, #59	; 0x3b
 8000fcc:	d103      	bne.n	8000fd6 <analyze_frame+0x67e>
			{
				// Mark frame as complete
				frame_complete = 1;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <analyze_frame+0x6d4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
				break;
 8000fd4:	e00f      	b.n	8000ff6 <analyze_frame+0x69e>
			}

			if (sw_state == 6)
 8000fd6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	d109      	bne.n	8000ff4 <analyze_frame+0x69c>
			{
				// Clear data array
				clear_array(data, data_len);
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <analyze_frame+0x6cc>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <analyze_frame+0x6d0>)
 8000fea:	f7ff fbb7 	bl	800075c <clear_array>

				// Reset sw_state
				sw_state = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			}
			break;
 8000ff4:	bf00      	nop
	while (frame_complete != 1)
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <analyze_frame+0x6d4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f47f acce 	bne.w	800099e <analyze_frame+0x46>
		} /* switch end */
	} /* while end */

	if (frame_complete == 1)
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <analyze_frame+0x6d4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <analyze_frame+0x6b8>
		return 1;
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <analyze_frame+0x6ba>
	else
		return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	377c      	adds	r7, #124	; 0x7c
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000038c 	.word	0x2000038c
 8001020:	20000394 	.word	0x20000394
 8001024:	20000398 	.word	0x20000398
 8001028:	2000018c 	.word	0x2000018c
 800102c:	2000038f 	.word	0x2000038f

08001030 <execute_command>:

// Execute command
void execute_command(char *frame_command, uint16_t frame_command_length)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
//	{
//		// Return empty command message
//		for (uint16_t i=0; i<(sizeof(frameempty)-2); i++)
//			uart_print(frameempty[i]);
//	}
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fb2a 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f889 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 f925 	bl	80012a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800105a:	f000 f8f3 	bl	8001244 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	4937      	ldr	r1, [pc, #220]	; (8001140 <main+0xf8>)
 8001062:	4838      	ldr	r0, [pc, #224]	; (8001144 <main+0xfc>)
 8001064:	f002 f8de 	bl	8003224 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <main+0xf8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fad9 	bl	8000624 <char_is_endmessage>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <main+0x3e>
		  message_length = get_message(message);
 8001078:	4833      	ldr	r0, [pc, #204]	; (8001148 <main+0x100>)
 800107a:	f7ff fba3 	bl	80007c4 <get_message>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <main+0x104>)
 8001084:	801a      	strh	r2, [r3, #0]

	  // Analyze frame if message had any content
	  if (message_length > 0)
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <main+0x104>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0eb      	beq.n	8001068 <main+0x20>
	  {
		  // Check if valid frame was found
		  valid_frame_found = analyze_frame(message);
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <main+0x100>)
 8001092:	f7ff fc61 	bl	8000958 <analyze_frame>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <main+0x108>)
 800109c:	701a      	strb	r2, [r3, #0]

		  // On empty frame
		  if (valid_frame_found == 1 && data_len == 0)
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <main+0x108>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10e      	bne.n	80010c6 <main+0x7e>
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <main+0x10c>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <main+0x7e>
		  {
			  // Send [FRAMEEMPTY] message
			  char FRAMEEMPTY[] = "FRAMEEMPTY\r\n";
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <main+0x110>)
 80010b4:	463c      	mov	r4, r7
 80010b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b8:	c407      	stmia	r4!, {r0, r1, r2}
 80010ba:	7023      	strb	r3, [r4, #0]
			  return_message(FRAMEEMPTY);
 80010bc:	463b      	mov	r3, r7
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fbd8 	bl	8000874 <return_message>
		  {
 80010c4:	e030      	b.n	8001128 <main+0xe0>
		  }
		  // On frame with content
		  else if (valid_frame_found == 1 && data_len > 0)
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <main+0x108>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d11d      	bne.n	800110c <main+0xc4>
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <main+0x10c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d018      	beq.n	800110c <main+0xc4>
		  {
			  // Print command message
			  return_message(data);
 80010da:	4820      	ldr	r0, [pc, #128]	; (800115c <main+0x114>)
 80010dc:	f7ff fbca 	bl	8000874 <return_message>
			  return_message("\r\n");
 80010e0:	481f      	ldr	r0, [pc, #124]	; (8001160 <main+0x118>)
 80010e2:	f7ff fbc7 	bl	8000874 <return_message>

			  // Run sent command
			  execute_command(data, data_len);
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <main+0x10c>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <main+0x114>)
 80010f0:	f7ff ff9e 	bl	8001030 <execute_command>

			  // Clear data array
			  data_len = clear_array(data, data_len);
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <main+0x10c>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <main+0x114>)
 80010fe:	f7ff fb2d 	bl	800075c <clear_array>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <main+0x10c>)
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	e00d      	b.n	8001128 <main+0xe0>
		  }
		  // If no correct frame was found
		  else
		  {
			  // Send [Error] message
			  return_message("Error\r\n");
 800110c:	4815      	ldr	r0, [pc, #84]	; (8001164 <main+0x11c>)
 800110e:	f7ff fbb1 	bl	8000874 <return_message>

			  // Reset message array and message length
			  message_length = clear_array(message, message_length);
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <main+0x104>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <main+0x100>)
 800111c:	f7ff fb1e 	bl	800075c <clear_array>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <main+0x104>)
 8001126:	801a      	strh	r2, [r3, #0]
		  }

		  // Reset message array and message length
		  message_length = clear_array(message, message_length);
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <main+0x104>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <main+0x100>)
 8001132:	f7ff fb13 	bl	800075c <clear_array>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <main+0x104>)
 800113c:	801a      	strh	r2, [r3, #0]
	  if (char_is_endmessage(character))
 800113e:	e793      	b.n	8001068 <main+0x20>
 8001140:	20000114 	.word	0x20000114
 8001144:	2000008c 	.word	0x2000008c
 8001148:	20000118 	.word	0x20000118
 800114c:	2000017c 	.word	0x2000017c
 8001150:	20000390 	.word	0x20000390
 8001154:	20000398 	.word	0x20000398
 8001158:	08005310 	.word	0x08005310
 800115c:	2000018c 	.word	0x2000018c
 8001160:	08005304 	.word	0x08005304
 8001164:	08005308 	.word	0x08005308

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2234      	movs	r2, #52	; 0x34
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fb74 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <SystemClock_Config+0xd4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <SystemClock_Config+0xd4>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <SystemClock_Config+0xd4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SystemClock_Config+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <SystemClock_Config+0xd8>)
 80011aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <SystemClock_Config+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011d4:	23d8      	movs	r3, #216	; 0xd8
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fe73 	bl	8001ed4 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011f4:	f000 f910 	bl	8001418 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f8:	f000 fe1c 	bl	8001e34 <HAL_PWREx_EnableOverDrive>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001202:	f000 f909 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2302      	movs	r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001212:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2107      	movs	r1, #7
 8001224:	4618      	mov	r0, r3
 8001226:	f001 f903 	bl	8002430 <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001230:	f000 f8f2 	bl	8001418 <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	3750      	adds	r7, #80	; 0x50
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART3_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART3_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART3_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART3_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001288:	f001 ff20 	bl	80030cc <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 f8c1 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000008c 	.word	0x2000008c
 80012a0:	40004800 	.word	0x40004800

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a29      	ldr	r2, [pc, #164]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_GPIO_Init+0xc0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_GPIO_Init+0xc0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_GPIO_Init+0xc0>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_GPIO_Init+0xc0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <MX_GPIO_Init+0xc4>)
 8001320:	f000 fd6e 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_GPIO_Init+0xc8>)
 800133a:	f000 fbb5 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_GPIO_Init+0xc4>)
 8001356:	f000 fba7 	bl	8001aa8 <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800

08001370 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_RxCpltCallback+0x44>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f939 	bl	80005f4 <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_UART_RxCpltCallback+0x48>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d10e      	bne.n	80013aa <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_UART_RxCpltCallback+0x4c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_UART_RxCpltCallback+0x44>)
 8001396:	7819      	ldrb	r1, [r3, #0]
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_UART_RxCpltCallback+0x50>)
 800139a:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 800139c:	f7ff f96c 	bl	8000678 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	4904      	ldr	r1, [pc, #16]	; (80013b4 <HAL_UART_RxCpltCallback+0x44>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f001 ff3d 	bl	8003224 <HAL_UART_Receive_IT>
	}
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000114 	.word	0x20000114
 80013b8:	40004800 	.word	0x40004800
 80013bc:	20000400 	.word	0x20000400
 80013c0:	2000039c 	.word	0x2000039c

080013c4 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_UART_TxCpltCallback+0x44>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d113      	bne.n	80013fe <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 80013d6:	f7ff f97f 	bl	80006d8 <tx_has_data>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10e      	bne.n	80013fe <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_UART_TxCpltCallback+0x48>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_UART_TxCpltCallback+0x4c>)
 80013ea:	5c9a      	ldrb	r2, [r3, r2]
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_UART_TxCpltCallback+0x50>)
 80013ee:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 80013f0:	f7ff f988 	bl	8000704 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	4907      	ldr	r1, [pc, #28]	; (8001414 <HAL_UART_TxCpltCallback+0x50>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f001 feb5 	bl	8003168 <HAL_UART_Transmit_IT>
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004800 	.word	0x40004800
 800140c:	2000046a 	.word	0x2000046a
 8001410:	20000404 	.word	0x20000404
 8001414:	200004d4 	.word	0x200004d4

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_MspInit+0x54>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_MspInit+0x54>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x54>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_MspInit+0x54>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_MspInit+0x54>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145a:	2007      	movs	r0, #7
 800145c:	f000 fa50 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2005      	movs	r0, #5
 8001466:	f000 fa56 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800146a:	2005      	movs	r0, #5
 800146c:	f000 fa6f 	bl	800194e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ae      	sub	sp, #184	; 0xb8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2290      	movs	r2, #144	; 0x90
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f003 f9e1 	bl	8004864 <memset>
  if(huart->Instance==USART3)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_UART_MspInit+0xc4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d144      	bne.n	8001536 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80014b2:	2310      	movs	r3, #16
 80014b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 f9de 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014c6:	f7ff ffa7 	bl	8001418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0xc8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151e:	4619      	mov	r1, r3
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_UART_MspInit+0xcc>)
 8001522:	f000 fac1 	bl	8001aa8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2027      	movs	r0, #39	; 0x27
 800152c:	f000 f9f3 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001530:	2027      	movs	r0, #39	; 0x27
 8001532:	f000 fa0c 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	37b8      	adds	r7, #184	; 0xb8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004800 	.word	0x40004800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020c00 	.word	0x40020c00

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f8c2 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <USART3_IRQHandler+0x10>)
 80015b6:	f001 fe79 	bl	80032ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000008c 	.word	0x2000008c

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f003 f90c 	bl	8004810 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20080000 	.word	0x20080000
 8001624:	00000400 	.word	0x00000400
 8001628:	200004d8 	.word	0x200004d8
 800162c:	200004f0 	.word	0x200004f0

08001630 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f003 f8cb 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fcdf 	bl	8001048 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001698:	0800547c 	.word	0x0800547c
  ldr r2, =_sbss
 800169c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016a0:	200004f0 	.word	0x200004f0

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>

080016a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f928 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f805 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff feb5 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f943 	bl	800196a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f90b 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	200004dc 	.word	0x200004dc

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200004dc 	.word	0x200004dc

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff feda 	bl	8001748 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e052      	b.n	8001a5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0216 	bic.w	r2, r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <HAL_DMA_Abort+0x62>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0208 	bic.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e013      	b.n	8001a2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fe9f 	bl	8001748 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d90c      	bls.n	8001a2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e015      	b.n	8001a5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e4      	bne.n	8001a06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d004      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00c      	b.n	8001a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2205      	movs	r2, #5
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e175      	b.n	8001db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8164 	bne.w	8001dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x56>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80be 	beq.w	8001dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a65      	ldr	r2, [pc, #404]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c4a:	4a61      	ldr	r2, [pc, #388]	; (8001dd0 <HAL_GPIO_Init+0x328>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d037      	beq.n	8001ce6 <HAL_GPIO_Init+0x23e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d031      	beq.n	8001ce2 <HAL_GPIO_Init+0x23a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02b      	beq.n	8001cde <HAL_GPIO_Init+0x236>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a55      	ldr	r2, [pc, #340]	; (8001de0 <HAL_GPIO_Init+0x338>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d025      	beq.n	8001cda <HAL_GPIO_Init+0x232>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <HAL_GPIO_Init+0x33c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01f      	beq.n	8001cd6 <HAL_GPIO_Init+0x22e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_GPIO_Init+0x340>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x22a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_GPIO_Init+0x344>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x226>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_GPIO_Init+0x348>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x222>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x34c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x21e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x21a>
 8001cbe:	2309      	movs	r3, #9
 8001cc0:	e012      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	e010      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	e00e      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x240>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cf8:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <HAL_GPIO_Init+0x328>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b32      	ldr	r3, [pc, #200]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_GPIO_Init+0x354>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f ae86 	bls.w	8001ac8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40022400 	.word	0x40022400
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e62:	f7ff fc71 	bl	8001748 <HAL_GetTick>
 8001e66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e68:	e009      	b.n	8001e7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e6a:	f7ff fc6d 	bl	8001748 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e78:	d901      	bls.n	8001e7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e022      	b.n	8001ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff fc56 	bl	8001748 <HAL_GetTick>
 8001e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e9e:	e009      	b.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea0:	f7ff fc52 	bl	8001748 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eae:	d901      	bls.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e007      	b.n	8001ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e29b      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b96      	ldr	r3, [pc, #600]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d00c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f04:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d112      	bne.n	8001f36 <HAL_RCC_OscConfig+0x62>
 8001f10:	4b90      	ldr	r3, [pc, #576]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06c      	beq.n	8002004 <HAL_RCC_OscConfig+0x130>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d168      	bne.n	8002004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e275      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x7a>
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a83      	ldr	r2, [pc, #524]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0xd8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x9c>
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7b      	ldr	r2, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xd8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xc0>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xd8>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6e      	ldr	r2, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6b      	ldr	r2, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fbc8 	bl	8001748 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fbc4 	bl	8001748 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e229      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe8>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fbb4 	bl	8001748 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fbb0 	bl	8001748 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e215      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x110>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d069      	beq.n	80020e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x190>
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x17a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1e9      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	493d      	ldr	r1, [pc, #244]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e040      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a38      	ldr	r2, [pc, #224]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fb66 	bl	8001748 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fb62 	bl	8001748 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1c7      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4929      	ldr	r1, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
 80020b2:	e018      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fb42 	bl	8001748 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fb3e 	bl	8001748 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1a3      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d038      	beq.n	8002164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 80020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff fb1f 	bl	8001748 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fb1b 	bl	8001748 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e180      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x23a>
 800212c:	e01a      	b.n	8002164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_RCC_OscConfig+0x280>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7ff fb05 	bl	8001748 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002142:	f7ff fb01 	bl	8001748 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d903      	bls.n	8002158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e166      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
 8002154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ee      	bne.n	8002142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a4 	beq.w	80022ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b89      	ldr	r3, [pc, #548]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a88      	ldr	r2, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b86      	ldr	r3, [pc, #536]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x4d4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021a6:	4b80      	ldr	r3, [pc, #512]	; (80023a8 <HAL_RCC_OscConfig+0x4d4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7f      	ldr	r2, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x4d4>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fac9 	bl	8001748 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7ff fac5 	bl	8001748 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e12a      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x4d4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x31a>
 80021e0:	4b70      	ldr	r3, [pc, #448]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a6f      	ldr	r2, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x376>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x33c>
 80021f6:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a6a      	ldr	r2, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
 8002202:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a67      	ldr	r2, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x376>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x35e>
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a61      	ldr	r2, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a5e      	ldr	r2, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x376>
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a5b      	ldr	r2, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
 800223e:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff fa79 	bl	8001748 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fa75 	bl	8001748 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0d8      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x386>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7ff fa63 	bl	8001748 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff fa5f 	bl	8001748 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0c2      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a3c      	ldr	r2, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80ae 	beq.w	8002420 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d06d      	beq.n	80023ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d14b      	bne.n	8002370 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fa30 	bl	8001748 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fa2c 	bl	8001748 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e091      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	071b      	lsls	r3, r3, #28
 8002336:	491b      	ldr	r1, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f9fe 	bl	8001748 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f9fa 	bl	8001748 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e05f      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x47c>
 800236e:	e057      	b.n	8002420 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f9e4 	bl	8001748 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f9e0 	bl	8001748 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e045      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x4b0>
 80023a2:	e03d      	b.n	8002420 <HAL_RCC_OscConfig+0x54c>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <HAL_RCC_OscConfig+0x558>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d030      	beq.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d129      	bne.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d122      	bne.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d119      	bne.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10f      	bne.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d107      	bne.n	800241c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d0      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 020f 	bic.w	r2, r3, #15
 800245e:	4965      	ldr	r1, [pc, #404]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d040      	beq.n	8002554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d115      	bne.n	8002512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e073      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06b      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4936      	ldr	r1, [pc, #216]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7ff f910 	bl	8001748 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7ff f90c 	bl	8001748 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e053      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d210      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 020f 	bic.w	r2, r3, #15
 800256a:	4922      	ldr	r1, [pc, #136]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1d0>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1d4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f86c 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08005320 	.word	0x08005320
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b094      	sub	sp, #80	; 0x50
 800260e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	647b      	str	r3, [r7, #68]	; 0x44
 8002614:	2300      	movs	r3, #0
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002618:	2300      	movs	r3, #0
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002620:	4b79      	ldr	r3, [pc, #484]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d00d      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x40>
 800262c:	2b08      	cmp	r3, #8
 800262e:	f200 80e1 	bhi.w	80027f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x34>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d003      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x3a>
 800263a:	e0db      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCC_GetSysClockFreq+0x204>)
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002640:	e0db      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002642:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCC_GetSysClockFreq+0x208>)
 8002644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002646:	e0d8      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002648:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002650:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002652:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2200      	movs	r2, #0
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
 8002668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
 8002676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4621      	mov	r1, r4
 8002694:	1a51      	subs	r1, r2, r1
 8002696:	6139      	str	r1, [r7, #16]
 8002698:	4629      	mov	r1, r5
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ac:	4659      	mov	r1, fp
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	4651      	mov	r1, sl
 80026b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b6:	4651      	mov	r1, sl
 80026b8:	018a      	lsls	r2, r1, #6
 80026ba:	4651      	mov	r1, sl
 80026bc:	ebb2 0801 	subs.w	r8, r2, r1
 80026c0:	4659      	mov	r1, fp
 80026c2:	eb63 0901 	sbc.w	r9, r3, r1
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026da:	4690      	mov	r8, r2
 80026dc:	4699      	mov	r9, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	eb18 0303 	adds.w	r3, r8, r3
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	462b      	mov	r3, r5
 80026e8:	eb49 0303 	adc.w	r3, r9, r3
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026fa:	4629      	mov	r1, r5
 80026fc:	024b      	lsls	r3, r1, #9
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002704:	4621      	mov	r1, r4
 8002706:	024a      	lsls	r2, r1, #9
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270e:	2200      	movs	r2, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002718:	f7fd fdea 	bl	80002f0 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002724:	e058      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	4618      	mov	r0, r3
 8002730:	4611      	mov	r1, r2
 8002732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	f04f 0000 	mov.w	r0, #0
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	0159      	lsls	r1, r3, #5
 800274e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002752:	0150      	lsls	r0, r2, #5
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4641      	mov	r1, r8
 800275a:	ebb2 0a01 	subs.w	sl, r2, r1
 800275e:	4649      	mov	r1, r9
 8002760:	eb63 0b01 	sbc.w	fp, r3, r1
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002778:	ebb2 040a 	subs.w	r4, r2, sl
 800277c:	eb63 050b 	sbc.w	r5, r3, fp
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	00eb      	lsls	r3, r5, #3
 800278a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278e:	00e2      	lsls	r2, r4, #3
 8002790:	4614      	mov	r4, r2
 8002792:	461d      	mov	r5, r3
 8002794:	4643      	mov	r3, r8
 8002796:	18e3      	adds	r3, r4, r3
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	464b      	mov	r3, r9
 800279c:	eb45 0303 	adc.w	r3, r5, r3
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ae:	4629      	mov	r1, r5
 80027b0:	028b      	lsls	r3, r1, #10
 80027b2:	4621      	mov	r1, r4
 80027b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b8:	4621      	mov	r1, r4
 80027ba:	028a      	lsls	r2, r1, #10
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	2200      	movs	r2, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	61fa      	str	r2, [r7, #28]
 80027c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027cc:	f7fd fd90 	bl	80002f0 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4613      	mov	r3, r2
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	3301      	adds	r3, #1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f2:	e002      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetSysClockFreq+0x204>)
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3750      	adds	r7, #80	; 0x50
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_GetHCLKFreq+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000000 	.word	0x20000000

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002830:	f7ff fff0 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0a9b      	lsrs	r3, r3, #10
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40023800 	.word	0x40023800
 8002850:	08005330 	.word	0x08005330

08002854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002858:	f7ff ffdc 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0b5b      	lsrs	r3, r3, #13
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	08005330 	.word	0x08005330

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ae:	6093      	str	r3, [r2, #8]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	4964      	ldr	r1, [pc, #400]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	4959      	ldr	r1, [pc, #356]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	494a      	ldr	r1, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 808b 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe fee0 	bl	8001748 <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7fe fedc 	bl	8001748 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e38f      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d035      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d02e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d114      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fea4 	bl	8001748 <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fea0 	bl	8001748 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e351      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d111      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	4901      	ldr	r1, [pc, #4]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	0ffffcff 	.word	0x0ffffcff
 8002a58:	4bac      	ldr	r3, [pc, #688]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4aab      	ldr	r2, [pc, #684]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	49a6      	ldr	r1, [pc, #664]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a82:	4ba2      	ldr	r3, [pc, #648]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	4aa0      	ldr	r2, [pc, #640]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a92:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	499b      	ldr	r1, [pc, #620]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab0:	4b96      	ldr	r3, [pc, #600]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abe:	4993      	ldr	r1, [pc, #588]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad2:	4b8e      	ldr	r3, [pc, #568]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae0:	498a      	ldr	r1, [pc, #552]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af4:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	4982      	ldr	r1, [pc, #520]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4979      	ldr	r1, [pc, #484]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b38:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4971      	ldr	r1, [pc, #452]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f023 020c 	bic.w	r2, r3, #12
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	4968      	ldr	r1, [pc, #416]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7c:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4960      	ldr	r1, [pc, #384]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	4957      	ldr	r1, [pc, #348]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc0:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	494f      	ldr	r1, [pc, #316]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4946      	ldr	r1, [pc, #280]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	493e      	ldr	r1, [pc, #248]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c56:	492d      	ldr	r1, [pc, #180]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c78:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c88:	d101      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	4914      	ldr	r1, [pc, #80]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	490b      	ldr	r1, [pc, #44]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d00:	4902      	ldr	r1, [pc, #8]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	4986      	ldr	r1, [pc, #536]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	497d      	ldr	r1, [pc, #500]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d006      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80d6 	beq.w	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fce6 	bl	8001748 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d80:	f7fe fce2 	bl	8001748 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e195      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d021      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc6:	0e1b      	lsrs	r3, r3, #24
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	4958      	ldr	r1, [pc, #352]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d129      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	0f1b      	lsrs	r3, r3, #28
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	019a      	lsls	r2, r3, #6
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	493e      	ldr	r1, [pc, #248]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5c:	f023 021f 	bic.w	r2, r3, #31
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4938      	ldr	r1, [pc, #224]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01d      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e80:	0e1b      	lsrs	r3, r3, #24
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8e:	0f1b      	lsrs	r3, r3, #28
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	019a      	lsls	r2, r3, #6
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	071b      	lsls	r3, r3, #28
 8002eae:	4926      	ldr	r1, [pc, #152]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d011      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	019a      	lsls	r2, r3, #6
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	491a      	ldr	r1, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fc29 	bl	8001748 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efa:	f7fe fc25 	bl	8001748 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0d8      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80ce 	bne.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fc0c 	bl	8001748 <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f32:	e00b      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f34:	f7fe fc08 	bl	8001748 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d904      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0bb      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f4c:	4b5e      	ldr	r3, [pc, #376]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f58:	d0ec      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02e      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d12a      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	0f1b      	lsrs	r3, r3, #28
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	019a      	lsls	r2, r3, #6
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4944      	ldr	r1, [pc, #272]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fbe:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	493d      	ldr	r1, [pc, #244]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d022      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fec:	d11d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	0e1b      	lsrs	r3, r3, #24
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	0f1b      	lsrs	r3, r3, #28
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	019a      	lsls	r2, r3, #6
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	071b      	lsls	r3, r3, #28
 8003022:	4929      	ldr	r1, [pc, #164]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	019a      	lsls	r2, r3, #6
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	4917      	ldr	r1, [pc, #92]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	4911      	ldr	r1, [pc, #68]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003094:	f7fe fb58 	bl	8001748 <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800309c:	f7fe fb54 	bl	8001748 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e007      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ba:	d1ef      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e040      	b.n	8003160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f9c4 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fbd6 	bl	80038bc <UART_SetConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e022      	b.n	8003160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fe2e 	bl	8003d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 feb5 	bl	8003ec8 <UART_CheckIdleState>
 800315e:	4603      	mov	r3, r0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	2b20      	cmp	r3, #32
 800317c:	d147      	bne.n	800320e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Transmit_IT+0x22>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e040      	b.n	8003210 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	; 0x21
 80031b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d107      	bne.n	80031d2 <HAL_UART_Transmit_IT+0x6a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_UART_Transmit_IT+0xb4>)
 80031ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80031d0:	e002      	b.n	80031d8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a12      	ldr	r2, [pc, #72]	; (8003220 <HAL_UART_Transmit_IT+0xb8>)
 80031d6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	613b      	str	r3, [r7, #16]
   return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	61bb      	str	r3, [r7, #24]
   return(result);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e6      	bne.n	80031d8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	372c      	adds	r7, #44	; 0x2c
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	08004427 	.word	0x08004427
 8003220:	08004371 	.word	0x08004371

08003224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003238:	2b20      	cmp	r3, #32
 800323a:	d132      	bne.n	80032a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Receive_IT+0x24>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02b      	b.n	80032a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	613b      	str	r3, [r7, #16]
   return(result);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	69f9      	ldr	r1, [r7, #28]
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	61bb      	str	r3, [r7, #24]
   return(result);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e6      	bne.n	8003260 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	461a      	mov	r2, r3
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 ff29 	bl	80040f0 <UART_Start_Receive_IT>
 800329e:	4603      	mov	r3, r0
 80032a0:	e000      	b.n	80032a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0ba      	sub	sp, #232	; 0xe8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80032da:	4013      	ands	r3, r2
 80032dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d115      	bne.n	8003314 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 82ac 	beq.w	8003862 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
      }
      return;
 8003312:	e2a6      	b.n	8003862 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8117 	beq.w	800354c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800331e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800332a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_UART_IRQHandler+0x298>)
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 810a 	beq.w	800354c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d011      	beq.n	8003368 <HAL_UART_IRQHandler+0xbc>
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2201      	movs	r2, #1
 8003356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <HAL_UART_IRQHandler+0xec>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2202      	movs	r2, #2
 8003386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <HAL_UART_IRQHandler+0x11c>
 80033a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2204      	movs	r2, #4
 80033b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d017      	beq.n	8003404 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2208      	movs	r2, #8
 80033f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_UART_IRQHandler+0x18a>
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8212 	beq.w	8003866 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800344e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003486:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04f      	beq.n	800352e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fef4 	bl	800427c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d141      	bne.n	8003526 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3308      	adds	r3, #8
 80034a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1d9      	bne.n	80034a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d013      	beq.n	800351e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_UART_IRQHandler+0x29c>)
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe faad 	bl	8001a62 <HAL_DMA_Abort_IT>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d017      	beq.n	800353e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e00f      	b.n	800353e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9ac 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	e00b      	b.n	800353e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9a8 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	e007      	b.n	800353e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9a4 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800353c:	e193      	b.n	8003866 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353e:	bf00      	nop
    return;
 8003540:	e191      	b.n	8003866 <HAL_UART_IRQHandler+0x5ba>
 8003542:	bf00      	nop
 8003544:	04000120 	.word	0x04000120
 8003548:	08004345 	.word	0x08004345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	2b01      	cmp	r3, #1
 8003552:	f040 814c 	bne.w	80037ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8145 	beq.w	80037ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 813e 	beq.w	80037ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2210      	movs	r2, #16
 8003578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	f040 80b6 	bne.w	80036f6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003596:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8165 	beq.w	800386a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035aa:	429a      	cmp	r2, r3
 80035ac:	f080 815d 	bcs.w	800386a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	f000 8086 	beq.w	80036d4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800360a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1da      	bne.n	80035c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3308      	adds	r3, #8
 8003618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800363a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800363e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e1      	bne.n	8003612 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3308      	adds	r3, #8
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800365e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e3      	bne.n	800364e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a4:	f023 0310 	bic.w	r3, r3, #16
 80036a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80036b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e4      	bne.n	8003694 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe f957 	bl	8001982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8ce 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f4:	e0b9      	b.n	800386a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003702:	b29b      	uxth	r3, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80ab 	beq.w	800386e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a6 	beq.w	800386e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
 8003746:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800374a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e4      	bne.n	8003722 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3308      	adds	r3, #8
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	623b      	str	r3, [r7, #32]
   return(result);
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3308      	adds	r3, #8
 8003778:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800377c:	633a      	str	r2, [r7, #48]	; 0x30
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e3      	bne.n	8003758 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	69b9      	ldr	r1, [r7, #24]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	617b      	str	r3, [r7, #20]
   return(result);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e4      	bne.n	80037a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f852 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037ec:	e03f      	b.n	800386e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_UART_IRQHandler+0x56c>
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800380e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f849 	bl	80038a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003816:	e02d      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00e      	beq.n	8003842 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01c      	beq.n	8003872 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    }
    return;
 8003840:	e017      	b.n	8003872 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <HAL_UART_IRQHandler+0x5c8>
 800384e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fe43 	bl	80044e6 <UART_EndTransmit_IT>
    return;
 8003860:	e008      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003862:	bf00      	nop
 8003864:	e006      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
      return;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
      return;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003872:	bf00      	nop
  }

}
 8003874:	37e8      	adds	r7, #232	; 0xe8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop

0800387c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4ba6      	ldr	r3, [pc, #664]	; (8003b80 <UART_SetConfig+0x2c4>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a94      	ldr	r2, [pc, #592]	; (8003b84 <UART_SetConfig+0x2c8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d120      	bne.n	800397a <UART_SetConfig+0xbe>
 8003938:	4b93      	ldr	r3, [pc, #588]	; (8003b88 <UART_SetConfig+0x2cc>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d816      	bhi.n	8003974 <UART_SetConfig+0xb8>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x90>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800395d 	.word	0x0800395d
 8003950:	08003969 	.word	0x08003969
 8003954:	08003963 	.word	0x08003963
 8003958:	0800396f 	.word	0x0800396f
 800395c:	2301      	movs	r3, #1
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e150      	b.n	8003c04 <UART_SetConfig+0x348>
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e14d      	b.n	8003c04 <UART_SetConfig+0x348>
 8003968:	2304      	movs	r3, #4
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e14a      	b.n	8003c04 <UART_SetConfig+0x348>
 800396e:	2308      	movs	r3, #8
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e147      	b.n	8003c04 <UART_SetConfig+0x348>
 8003974:	2310      	movs	r3, #16
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e144      	b.n	8003c04 <UART_SetConfig+0x348>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a83      	ldr	r2, [pc, #524]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d132      	bne.n	80039ea <UART_SetConfig+0x12e>
 8003984:	4b80      	ldr	r3, [pc, #512]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d828      	bhi.n	80039e4 <UART_SetConfig+0x128>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0xdc>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039cd 	.word	0x080039cd
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039e5 	.word	0x080039e5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039d3 	.word	0x080039d3
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039e5 	.word	0x080039e5
 80039c8:	080039df 	.word	0x080039df
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e118      	b.n	8003c04 <UART_SetConfig+0x348>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e115      	b.n	8003c04 <UART_SetConfig+0x348>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e112      	b.n	8003c04 <UART_SetConfig+0x348>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e10f      	b.n	8003c04 <UART_SetConfig+0x348>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e10c      	b.n	8003c04 <UART_SetConfig+0x348>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a68      	ldr	r2, [pc, #416]	; (8003b90 <UART_SetConfig+0x2d4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <UART_SetConfig+0x17a>
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <UART_SetConfig+0x2cc>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039fe:	2b30      	cmp	r3, #48	; 0x30
 8003a00:	d013      	beq.n	8003a2a <UART_SetConfig+0x16e>
 8003a02:	2b30      	cmp	r3, #48	; 0x30
 8003a04:	d814      	bhi.n	8003a30 <UART_SetConfig+0x174>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d009      	beq.n	8003a1e <UART_SetConfig+0x162>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d810      	bhi.n	8003a30 <UART_SetConfig+0x174>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x15c>
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d006      	beq.n	8003a24 <UART_SetConfig+0x168>
 8003a16:	e00b      	b.n	8003a30 <UART_SetConfig+0x174>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e0f2      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e0ef      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a24:	2304      	movs	r3, #4
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0ec      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0e9      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a30:	2310      	movs	r3, #16
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0e6      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <UART_SetConfig+0x2d8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d120      	bne.n	8003a82 <UART_SetConfig+0x1c6>
 8003a40:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a4c:	d013      	beq.n	8003a76 <UART_SetConfig+0x1ba>
 8003a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a50:	d814      	bhi.n	8003a7c <UART_SetConfig+0x1c0>
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x1ae>
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d810      	bhi.n	8003a7c <UART_SetConfig+0x1c0>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <UART_SetConfig+0x1a8>
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d006      	beq.n	8003a70 <UART_SetConfig+0x1b4>
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x1c0>
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e0cc      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e0c9      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a70:	2304      	movs	r3, #4
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0c6      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a76:	2308      	movs	r3, #8
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e0c3      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e0c0      	b.n	8003c04 <UART_SetConfig+0x348>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a44      	ldr	r2, [pc, #272]	; (8003b98 <UART_SetConfig+0x2dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d125      	bne.n	8003ad8 <UART_SetConfig+0x21c>
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9a:	d017      	beq.n	8003acc <UART_SetConfig+0x210>
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa0:	d817      	bhi.n	8003ad2 <UART_SetConfig+0x216>
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d00b      	beq.n	8003ac0 <UART_SetConfig+0x204>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d811      	bhi.n	8003ad2 <UART_SetConfig+0x216>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <UART_SetConfig+0x1fe>
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d006      	beq.n	8003ac6 <UART_SetConfig+0x20a>
 8003ab8:	e00b      	b.n	8003ad2 <UART_SetConfig+0x216>
 8003aba:	2300      	movs	r3, #0
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e0a1      	b.n	8003c04 <UART_SetConfig+0x348>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e09e      	b.n	8003c04 <UART_SetConfig+0x348>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e09b      	b.n	8003c04 <UART_SetConfig+0x348>
 8003acc:	2308      	movs	r3, #8
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e098      	b.n	8003c04 <UART_SetConfig+0x348>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e095      	b.n	8003c04 <UART_SetConfig+0x348>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <UART_SetConfig+0x2e0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d125      	bne.n	8003b2e <UART_SetConfig+0x272>
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af0:	d017      	beq.n	8003b22 <UART_SetConfig+0x266>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af6:	d817      	bhi.n	8003b28 <UART_SetConfig+0x26c>
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afc:	d00b      	beq.n	8003b16 <UART_SetConfig+0x25a>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d811      	bhi.n	8003b28 <UART_SetConfig+0x26c>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x254>
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d006      	beq.n	8003b1c <UART_SetConfig+0x260>
 8003b0e:	e00b      	b.n	8003b28 <UART_SetConfig+0x26c>
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e076      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b16:	2302      	movs	r3, #2
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e073      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e070      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b22:	2308      	movs	r3, #8
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e06d      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e06a      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <UART_SetConfig+0x2e4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d138      	bne.n	8003baa <UART_SetConfig+0x2ee>
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b46:	d017      	beq.n	8003b78 <UART_SetConfig+0x2bc>
 8003b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b4c:	d82a      	bhi.n	8003ba4 <UART_SetConfig+0x2e8>
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b52:	d00b      	beq.n	8003b6c <UART_SetConfig+0x2b0>
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d824      	bhi.n	8003ba4 <UART_SetConfig+0x2e8>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <UART_SetConfig+0x2aa>
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d006      	beq.n	8003b72 <UART_SetConfig+0x2b6>
 8003b64:	e01e      	b.n	8003ba4 <UART_SetConfig+0x2e8>
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e04b      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e048      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b72:	2304      	movs	r3, #4
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e045      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e042      	b.n	8003c04 <UART_SetConfig+0x348>
 8003b7e:	bf00      	nop
 8003b80:	efff69f3 	.word	0xefff69f3
 8003b84:	40011000 	.word	0x40011000
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40004400 	.word	0x40004400
 8003b90:	40004800 	.word	0x40004800
 8003b94:	40004c00 	.word	0x40004c00
 8003b98:	40005000 	.word	0x40005000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	40007800 	.word	0x40007800
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e02c      	b.n	8003c04 <UART_SetConfig+0x348>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a72      	ldr	r2, [pc, #456]	; (8003d78 <UART_SetConfig+0x4bc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d125      	bne.n	8003c00 <UART_SetConfig+0x344>
 8003bb4:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <UART_SetConfig+0x4c0>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bc2:	d017      	beq.n	8003bf4 <UART_SetConfig+0x338>
 8003bc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bc8:	d817      	bhi.n	8003bfa <UART_SetConfig+0x33e>
 8003bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bce:	d00b      	beq.n	8003be8 <UART_SetConfig+0x32c>
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	d811      	bhi.n	8003bfa <UART_SetConfig+0x33e>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <UART_SetConfig+0x326>
 8003bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bde:	d006      	beq.n	8003bee <UART_SetConfig+0x332>
 8003be0:	e00b      	b.n	8003bfa <UART_SetConfig+0x33e>
 8003be2:	2300      	movs	r3, #0
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e00d      	b.n	8003c04 <UART_SetConfig+0x348>
 8003be8:	2302      	movs	r3, #2
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e00a      	b.n	8003c04 <UART_SetConfig+0x348>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e007      	b.n	8003c04 <UART_SetConfig+0x348>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x348>
 8003bfa:	2310      	movs	r3, #16
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e001      	b.n	8003c04 <UART_SetConfig+0x348>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	d15b      	bne.n	8003cc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d828      	bhi.n	8003c66 <UART_SetConfig+0x3aa>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0x360>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c49 	.word	0x08003c49
 8003c24:	08003c51 	.word	0x08003c51
 8003c28:	08003c67 	.word	0x08003c67
 8003c2c:	08003c57 	.word	0x08003c57
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c67 	.word	0x08003c67
 8003c3c:	08003c5f 	.word	0x08003c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe fdf4 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003c44:	61b8      	str	r0, [r7, #24]
        break;
 8003c46:	e013      	b.n	8003c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7fe fe04 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	61b8      	str	r0, [r7, #24]
        break;
 8003c4e:	e00f      	b.n	8003c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <UART_SetConfig+0x4c4>)
 8003c52:	61bb      	str	r3, [r7, #24]
        break;
 8003c54:	e00c      	b.n	8003c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe fcd7 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8003c5a:	61b8      	str	r0, [r7, #24]
        break;
 8003c5c:	e008      	b.n	8003c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c62:	61bb      	str	r3, [r7, #24]
        break;
 8003c64:	e004      	b.n	8003c70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d074      	beq.n	8003d60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	005a      	lsls	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0f      	cmp	r3, #15
 8003c90:	d916      	bls.n	8003cc0 <UART_SetConfig+0x404>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d212      	bcs.n	8003cc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f023 030f 	bic.w	r3, r3, #15
 8003ca2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	89fb      	ldrh	r3, [r7, #14]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	89fa      	ldrh	r2, [r7, #14]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	e04f      	b.n	8003d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	77bb      	strb	r3, [r7, #30]
 8003cc4:	e04c      	b.n	8003d60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d828      	bhi.n	8003d1e <UART_SetConfig+0x462>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0x418>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003d1f 	.word	0x08003d1f
 8003ce4:	08003d0f 	.word	0x08003d0f
 8003ce8:	08003d1f 	.word	0x08003d1f
 8003cec:	08003d1f 	.word	0x08003d1f
 8003cf0:	08003d1f 	.word	0x08003d1f
 8003cf4:	08003d17 	.word	0x08003d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe fd98 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003cfc:	61b8      	str	r0, [r7, #24]
        break;
 8003cfe:	e013      	b.n	8003d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d00:	f7fe fda8 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003d04:	61b8      	str	r0, [r7, #24]
        break;
 8003d06:	e00f      	b.n	8003d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <UART_SetConfig+0x4c4>)
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e00c      	b.n	8003d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0e:	f7fe fc7b 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8003d12:	61b8      	str	r0, [r7, #24]
        break;
 8003d14:	e008      	b.n	8003d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1a:	61bb      	str	r3, [r7, #24]
        break;
 8003d1c:	e004      	b.n	8003d28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	77bb      	strb	r3, [r7, #30]
        break;
 8003d26:	bf00      	nop
    }

    if (pclk != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d018      	beq.n	8003d60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085a      	lsrs	r2, r3, #1
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	441a      	add	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d909      	bls.n	8003d5c <UART_SetConfig+0x4a0>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d205      	bcs.n	8003d5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e001      	b.n	8003d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40007c00 	.word	0x40007c00
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	00f42400 	.word	0x00f42400

08003d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01a      	beq.n	8003e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e82:	d10a      	bne.n	8003e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ed8:	f7fd fc36 	bl	8001748 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d10e      	bne.n	8003f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f831 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e027      	b.n	8003f5a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d10e      	bne.n	8003f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f81b 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e011      	b.n	8003f5a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b09c      	sub	sp, #112	; 0x70
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f72:	e0a7      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	f000 80a3 	beq.w	80040c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fd fbe3 	bl	8001748 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d13f      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e068      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d050      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d148      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004050:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
 800405c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	613b      	str	r3, [r7, #16]
   return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	66bb      	str	r3, [r7, #104]	; 0x68
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800408e:	623a      	str	r2, [r7, #32]
 8004090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	69f9      	ldr	r1, [r7, #28]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	61bb      	str	r3, [r7, #24]
   return(result);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e010      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	429a      	cmp	r2, r3
 80040e0:	f43f af48 	beq.w	8003f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3770      	adds	r7, #112	; 0x70
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b097      	sub	sp, #92	; 0x5c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004122:	d10e      	bne.n	8004142 <UART_Start_Receive_IT+0x52>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <UART_Start_Receive_IT+0x48>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004136:	e02d      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	22ff      	movs	r2, #255	; 0xff
 800413c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004140:	e028      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <UART_Start_Receive_IT+0x76>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <UART_Start_Receive_IT+0x6c>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800415a:	e01b      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	227f      	movs	r2, #127	; 0x7f
 8004160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004164:	e016      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d10d      	bne.n	800418c <UART_Start_Receive_IT+0x9c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <UART_Start_Receive_IT+0x92>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	227f      	movs	r2, #127	; 0x7f
 800417c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004180:	e008      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	223f      	movs	r2, #63	; 0x3f
 8004186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800418a:	e003      	b.n	8004194 <UART_Start_Receive_IT+0xa4>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2222      	movs	r2, #34	; 0x22
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d107      	bne.n	80041f2 <UART_Start_Receive_IT+0x102>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a21      	ldr	r2, [pc, #132]	; (8004274 <UART_Start_Receive_IT+0x184>)
 80041ee:	669a      	str	r2, [r3, #104]	; 0x68
 80041f0:	e002      	b.n	80041f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <UART_Start_Receive_IT+0x188>)
 80041f6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d019      	beq.n	8004234 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
 8004220:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e6      	bne.n	8004200 <UART_Start_Receive_IT+0x110>
 8004232:	e018      	b.n	8004266 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	613b      	str	r3, [r7, #16]
   return(result);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f043 0320 	orr.w	r3, r3, #32
 8004248:	653b      	str	r3, [r7, #80]	; 0x50
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	69f9      	ldr	r1, [r7, #28]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e6      	bne.n	8004234 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	375c      	adds	r7, #92	; 0x5c
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	080046a1 	.word	0x080046a1
 8004278:	0800453b 	.word	0x0800453b

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b095      	sub	sp, #84	; 0x54
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a2:	643b      	str	r3, [r7, #64]	; 0x40
 80042a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e6      	bne.n	8004284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d118      	bne.n	8004324 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0310 	bic.w	r3, r3, #16
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	613b      	str	r3, [r7, #16]
   return(result);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004338:	bf00      	nop
 800433a:	3754      	adds	r7, #84	; 0x54
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fa8a 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b08f      	sub	sp, #60	; 0x3c
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437c:	2b21      	cmp	r3, #33	; 0x21
 800437e:	d14c      	bne.n	800441a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d132      	bne.n	80043f2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	61fb      	str	r3, [r7, #28]
   return(result);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	633b      	str	r3, [r7, #48]	; 0x30
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6979      	ldr	r1, [r7, #20]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043f0:	e013      	b.n	800441a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800441a:	bf00      	nop
 800441c:	373c      	adds	r7, #60	; 0x3c
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004426:	b480      	push	{r7}
 8004428:	b091      	sub	sp, #68	; 0x44
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	2b21      	cmp	r3, #33	; 0x21
 8004434:	d151      	bne.n	80044da <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d132      	bne.n	80044a8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 8004462:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60fb      	str	r3, [r7, #12]
   return(result);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	617b      	str	r3, [r7, #20]
   return(result);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044a6:	e018      	b.n	80044da <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044da:	bf00      	nop
 80044dc:	3744      	adds	r7, #68	; 0x44
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b088      	sub	sp, #32
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	613b      	str	r3, [r7, #16]
   return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fc ff49 	bl	80013c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b096      	sub	sp, #88	; 0x58
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004548:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	2b22      	cmp	r3, #34	; 0x22
 8004554:	f040 8098 	bne.w	8004688 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004562:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800456c:	b2da      	uxtb	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	400a      	ands	r2, r1
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d17b      	bne.n	8004698 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	623b      	str	r3, [r7, #32]
   return(result);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f2:	633a      	str	r2, [r7, #48]	; 0x30
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	2b01      	cmp	r3, #1
 8004620:	d12e      	bne.n	8004680 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60fb      	str	r3, [r7, #12]
   return(result);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0310 	bic.w	r3, r3, #16
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	69b9      	ldr	r1, [r7, #24]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	617b      	str	r3, [r7, #20]
   return(result);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e6      	bne.n	8004628 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d103      	bne.n	8004670 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff f909 	bl	8003890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800467e:	e00b      	b.n	8004698 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fe75 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8004686:	e007      	b.n	8004698 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	619a      	str	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	3758      	adds	r7, #88	; 0x58
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b096      	sub	sp, #88	; 0x58
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b8:	2b22      	cmp	r3, #34	; 0x22
 80046ba:	f040 8098 	bne.w	80047ee <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046d6:	4013      	ands	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d17b      	bne.n	80047fe <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800472a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	61fb      	str	r3, [r7, #28]
   return(result);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e5      	bne.n	8004738 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12e      	bne.n	80047e6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	60bb      	str	r3, [r7, #8]
   return(result);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0310 	bic.w	r3, r3, #16
 80047a2:	647b      	str	r3, [r7, #68]	; 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6979      	ldr	r1, [r7, #20]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d103      	bne.n	80047d6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2210      	movs	r2, #16
 80047d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff f856 	bl	8003890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047e4:	e00b      	b.n	80047fe <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fdc2 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 80047ec:	e007      	b.n	80047fe <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0208 	orr.w	r2, r2, #8
 80047fc:	619a      	str	r2, [r3, #24]
}
 80047fe:	bf00      	nop
 8004800:	3758      	adds	r7, #88	; 0x58
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <atoi>:
 8004806:	220a      	movs	r2, #10
 8004808:	2100      	movs	r1, #0
 800480a:	f000 b8c3 	b.w	8004994 <strtol>
	...

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f000 fd28 	bl	8005284 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	08005474 	.word	0x08005474
 8004858:	08005474 	.word	0x08005474
 800485c:	08005474 	.word	0x08005474
 8004860:	08005478 	.word	0x08005478

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <strchr>:
 8004874:	b2c9      	uxtb	r1, r1
 8004876:	4603      	mov	r3, r0
 8004878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487c:	b11a      	cbz	r2, 8004886 <strchr+0x12>
 800487e:	428a      	cmp	r2, r1
 8004880:	d1f9      	bne.n	8004876 <strchr+0x2>
 8004882:	4618      	mov	r0, r3
 8004884:	4770      	bx	lr
 8004886:	2900      	cmp	r1, #0
 8004888:	bf18      	it	ne
 800488a:	2300      	movne	r3, #0
 800488c:	e7f9      	b.n	8004882 <strchr+0xe>
	...

08004890 <_strtol_l.constprop.0>:
 8004890:	2b01      	cmp	r3, #1
 8004892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004896:	d001      	beq.n	800489c <_strtol_l.constprop.0+0xc>
 8004898:	2b24      	cmp	r3, #36	; 0x24
 800489a:	d906      	bls.n	80048aa <_strtol_l.constprop.0+0x1a>
 800489c:	f7ff ffb8 	bl	8004810 <__errno>
 80048a0:	2316      	movs	r3, #22
 80048a2:	6003      	str	r3, [r0, #0]
 80048a4:	2000      	movs	r0, #0
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004990 <_strtol_l.constprop.0+0x100>
 80048ae:	460d      	mov	r5, r1
 80048b0:	462e      	mov	r6, r5
 80048b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80048ba:	f017 0708 	ands.w	r7, r7, #8
 80048be:	d1f7      	bne.n	80048b0 <_strtol_l.constprop.0+0x20>
 80048c0:	2c2d      	cmp	r4, #45	; 0x2d
 80048c2:	d132      	bne.n	800492a <_strtol_l.constprop.0+0x9a>
 80048c4:	782c      	ldrb	r4, [r5, #0]
 80048c6:	2701      	movs	r7, #1
 80048c8:	1cb5      	adds	r5, r6, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d05b      	beq.n	8004986 <_strtol_l.constprop.0+0xf6>
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d109      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 80048d2:	2c30      	cmp	r4, #48	; 0x30
 80048d4:	d107      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 80048d6:	782c      	ldrb	r4, [r5, #0]
 80048d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048dc:	2c58      	cmp	r4, #88	; 0x58
 80048de:	d14d      	bne.n	800497c <_strtol_l.constprop.0+0xec>
 80048e0:	786c      	ldrb	r4, [r5, #1]
 80048e2:	2310      	movs	r3, #16
 80048e4:	3502      	adds	r5, #2
 80048e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80048ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80048ee:	f04f 0c00 	mov.w	ip, #0
 80048f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80048f6:	4666      	mov	r6, ip
 80048f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80048fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004900:	f1be 0f09 	cmp.w	lr, #9
 8004904:	d816      	bhi.n	8004934 <_strtol_l.constprop.0+0xa4>
 8004906:	4674      	mov	r4, lr
 8004908:	42a3      	cmp	r3, r4
 800490a:	dd24      	ble.n	8004956 <_strtol_l.constprop.0+0xc6>
 800490c:	f1bc 0f00 	cmp.w	ip, #0
 8004910:	db1e      	blt.n	8004950 <_strtol_l.constprop.0+0xc0>
 8004912:	45b1      	cmp	r9, r6
 8004914:	d31c      	bcc.n	8004950 <_strtol_l.constprop.0+0xc0>
 8004916:	d101      	bne.n	800491c <_strtol_l.constprop.0+0x8c>
 8004918:	45a2      	cmp	sl, r4
 800491a:	db19      	blt.n	8004950 <_strtol_l.constprop.0+0xc0>
 800491c:	fb06 4603 	mla	r6, r6, r3, r4
 8004920:	f04f 0c01 	mov.w	ip, #1
 8004924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004928:	e7e8      	b.n	80048fc <_strtol_l.constprop.0+0x6c>
 800492a:	2c2b      	cmp	r4, #43	; 0x2b
 800492c:	bf04      	itt	eq
 800492e:	782c      	ldrbeq	r4, [r5, #0]
 8004930:	1cb5      	addeq	r5, r6, #2
 8004932:	e7ca      	b.n	80048ca <_strtol_l.constprop.0+0x3a>
 8004934:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004938:	f1be 0f19 	cmp.w	lr, #25
 800493c:	d801      	bhi.n	8004942 <_strtol_l.constprop.0+0xb2>
 800493e:	3c37      	subs	r4, #55	; 0x37
 8004940:	e7e2      	b.n	8004908 <_strtol_l.constprop.0+0x78>
 8004942:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004946:	f1be 0f19 	cmp.w	lr, #25
 800494a:	d804      	bhi.n	8004956 <_strtol_l.constprop.0+0xc6>
 800494c:	3c57      	subs	r4, #87	; 0x57
 800494e:	e7db      	b.n	8004908 <_strtol_l.constprop.0+0x78>
 8004950:	f04f 3cff 	mov.w	ip, #4294967295
 8004954:	e7e6      	b.n	8004924 <_strtol_l.constprop.0+0x94>
 8004956:	f1bc 0f00 	cmp.w	ip, #0
 800495a:	da05      	bge.n	8004968 <_strtol_l.constprop.0+0xd8>
 800495c:	2322      	movs	r3, #34	; 0x22
 800495e:	6003      	str	r3, [r0, #0]
 8004960:	4646      	mov	r6, r8
 8004962:	b942      	cbnz	r2, 8004976 <_strtol_l.constprop.0+0xe6>
 8004964:	4630      	mov	r0, r6
 8004966:	e79e      	b.n	80048a6 <_strtol_l.constprop.0+0x16>
 8004968:	b107      	cbz	r7, 800496c <_strtol_l.constprop.0+0xdc>
 800496a:	4276      	negs	r6, r6
 800496c:	2a00      	cmp	r2, #0
 800496e:	d0f9      	beq.n	8004964 <_strtol_l.constprop.0+0xd4>
 8004970:	f1bc 0f00 	cmp.w	ip, #0
 8004974:	d000      	beq.n	8004978 <_strtol_l.constprop.0+0xe8>
 8004976:	1e69      	subs	r1, r5, #1
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	e7f3      	b.n	8004964 <_strtol_l.constprop.0+0xd4>
 800497c:	2430      	movs	r4, #48	; 0x30
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1b1      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 8004982:	2308      	movs	r3, #8
 8004984:	e7af      	b.n	80048e6 <_strtol_l.constprop.0+0x56>
 8004986:	2c30      	cmp	r4, #48	; 0x30
 8004988:	d0a5      	beq.n	80048d6 <_strtol_l.constprop.0+0x46>
 800498a:	230a      	movs	r3, #10
 800498c:	e7ab      	b.n	80048e6 <_strtol_l.constprop.0+0x56>
 800498e:	bf00      	nop
 8004990:	08005339 	.word	0x08005339

08004994 <strtol>:
 8004994:	4613      	mov	r3, r2
 8004996:	460a      	mov	r2, r1
 8004998:	4601      	mov	r1, r0
 800499a:	4802      	ldr	r0, [pc, #8]	; (80049a4 <strtol+0x10>)
 800499c:	6800      	ldr	r0, [r0, #0]
 800499e:	f7ff bf77 	b.w	8004890 <_strtol_l.constprop.0>
 80049a2:	bf00      	nop
 80049a4:	2000000c 	.word	0x2000000c

080049a8 <_vsiprintf_r>:
 80049a8:	b500      	push	{lr}
 80049aa:	b09b      	sub	sp, #108	; 0x6c
 80049ac:	9100      	str	r1, [sp, #0]
 80049ae:	9104      	str	r1, [sp, #16]
 80049b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049b4:	9105      	str	r1, [sp, #20]
 80049b6:	9102      	str	r1, [sp, #8]
 80049b8:	4905      	ldr	r1, [pc, #20]	; (80049d0 <_vsiprintf_r+0x28>)
 80049ba:	9103      	str	r1, [sp, #12]
 80049bc:	4669      	mov	r1, sp
 80049be:	f000 f86f 	bl	8004aa0 <_svfiprintf_r>
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	b01b      	add	sp, #108	; 0x6c
 80049ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ce:	bf00      	nop
 80049d0:	ffff0208 	.word	0xffff0208

080049d4 <vsiprintf>:
 80049d4:	4613      	mov	r3, r2
 80049d6:	460a      	mov	r2, r1
 80049d8:	4601      	mov	r1, r0
 80049da:	4802      	ldr	r0, [pc, #8]	; (80049e4 <vsiprintf+0x10>)
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	f7ff bfe3 	b.w	80049a8 <_vsiprintf_r>
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <__ssputs_r>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	688e      	ldr	r6, [r1, #8]
 80049ee:	429e      	cmp	r6, r3
 80049f0:	4682      	mov	sl, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	4690      	mov	r8, r2
 80049f6:	461f      	mov	r7, r3
 80049f8:	d838      	bhi.n	8004a6c <__ssputs_r+0x84>
 80049fa:	898a      	ldrh	r2, [r1, #12]
 80049fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a00:	d032      	beq.n	8004a68 <__ssputs_r+0x80>
 8004a02:	6825      	ldr	r5, [r4, #0]
 8004a04:	6909      	ldr	r1, [r1, #16]
 8004a06:	eba5 0901 	sub.w	r9, r5, r1
 8004a0a:	6965      	ldr	r5, [r4, #20]
 8004a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a14:	3301      	adds	r3, #1
 8004a16:	444b      	add	r3, r9
 8004a18:	106d      	asrs	r5, r5, #1
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	bf38      	it	cc
 8004a1e:	461d      	movcc	r5, r3
 8004a20:	0553      	lsls	r3, r2, #21
 8004a22:	d531      	bpl.n	8004a88 <__ssputs_r+0xa0>
 8004a24:	4629      	mov	r1, r5
 8004a26:	f000 fb63 	bl	80050f0 <_malloc_r>
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	b950      	cbnz	r0, 8004a44 <__ssputs_r+0x5c>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	f8ca 3000 	str.w	r3, [sl]
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a44:	6921      	ldr	r1, [r4, #16]
 8004a46:	464a      	mov	r2, r9
 8004a48:	f000 fabe 	bl	8004fc8 <memcpy>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	6126      	str	r6, [r4, #16]
 8004a5a:	6165      	str	r5, [r4, #20]
 8004a5c:	444e      	add	r6, r9
 8004a5e:	eba5 0509 	sub.w	r5, r5, r9
 8004a62:	6026      	str	r6, [r4, #0]
 8004a64:	60a5      	str	r5, [r4, #8]
 8004a66:	463e      	mov	r6, r7
 8004a68:	42be      	cmp	r6, r7
 8004a6a:	d900      	bls.n	8004a6e <__ssputs_r+0x86>
 8004a6c:	463e      	mov	r6, r7
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	4632      	mov	r2, r6
 8004a72:	4641      	mov	r1, r8
 8004a74:	f000 fab6 	bl	8004fe4 <memmove>
 8004a78:	68a3      	ldr	r3, [r4, #8]
 8004a7a:	1b9b      	subs	r3, r3, r6
 8004a7c:	60a3      	str	r3, [r4, #8]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	4433      	add	r3, r6
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	2000      	movs	r0, #0
 8004a86:	e7db      	b.n	8004a40 <__ssputs_r+0x58>
 8004a88:	462a      	mov	r2, r5
 8004a8a:	f000 fba5 	bl	80051d8 <_realloc_r>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d1e1      	bne.n	8004a58 <__ssputs_r+0x70>
 8004a94:	6921      	ldr	r1, [r4, #16]
 8004a96:	4650      	mov	r0, sl
 8004a98:	f000 fabe 	bl	8005018 <_free_r>
 8004a9c:	e7c7      	b.n	8004a2e <__ssputs_r+0x46>
	...

08004aa0 <_svfiprintf_r>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	4698      	mov	r8, r3
 8004aa6:	898b      	ldrh	r3, [r1, #12]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	b09d      	sub	sp, #116	; 0x74
 8004aac:	4607      	mov	r7, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	d50e      	bpl.n	8004ad2 <_svfiprintf_r+0x32>
 8004ab4:	690b      	ldr	r3, [r1, #16]
 8004ab6:	b963      	cbnz	r3, 8004ad2 <_svfiprintf_r+0x32>
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	f000 fb19 	bl	80050f0 <_malloc_r>
 8004abe:	6028      	str	r0, [r5, #0]
 8004ac0:	6128      	str	r0, [r5, #16]
 8004ac2:	b920      	cbnz	r0, 8004ace <_svfiprintf_r+0x2e>
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	e0d1      	b.n	8004c72 <_svfiprintf_r+0x1d2>
 8004ace:	2340      	movs	r3, #64	; 0x40
 8004ad0:	616b      	str	r3, [r5, #20]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ae0:	2330      	movs	r3, #48	; 0x30
 8004ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c8c <_svfiprintf_r+0x1ec>
 8004ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aea:	f04f 0901 	mov.w	r9, #1
 8004aee:	4623      	mov	r3, r4
 8004af0:	469a      	mov	sl, r3
 8004af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004af6:	b10a      	cbz	r2, 8004afc <_svfiprintf_r+0x5c>
 8004af8:	2a25      	cmp	r2, #37	; 0x25
 8004afa:	d1f9      	bne.n	8004af0 <_svfiprintf_r+0x50>
 8004afc:	ebba 0b04 	subs.w	fp, sl, r4
 8004b00:	d00b      	beq.n	8004b1a <_svfiprintf_r+0x7a>
 8004b02:	465b      	mov	r3, fp
 8004b04:	4622      	mov	r2, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f7ff ff6d 	bl	80049e8 <__ssputs_r>
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f000 80aa 	beq.w	8004c68 <_svfiprintf_r+0x1c8>
 8004b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b16:	445a      	add	r2, fp
 8004b18:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80a2 	beq.w	8004c68 <_svfiprintf_r+0x1c8>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b2e:	f10a 0a01 	add.w	sl, sl, #1
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	9307      	str	r3, [sp, #28]
 8004b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b3c:	4654      	mov	r4, sl
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b44:	4851      	ldr	r0, [pc, #324]	; (8004c8c <_svfiprintf_r+0x1ec>)
 8004b46:	f7fb fb83 	bl	8000250 <memchr>
 8004b4a:	9a04      	ldr	r2, [sp, #16]
 8004b4c:	b9d8      	cbnz	r0, 8004b86 <_svfiprintf_r+0xe6>
 8004b4e:	06d0      	lsls	r0, r2, #27
 8004b50:	bf44      	itt	mi
 8004b52:	2320      	movmi	r3, #32
 8004b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b58:	0711      	lsls	r1, r2, #28
 8004b5a:	bf44      	itt	mi
 8004b5c:	232b      	movmi	r3, #43	; 0x2b
 8004b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b62:	f89a 3000 	ldrb.w	r3, [sl]
 8004b66:	2b2a      	cmp	r3, #42	; 0x2a
 8004b68:	d015      	beq.n	8004b96 <_svfiprintf_r+0xf6>
 8004b6a:	9a07      	ldr	r2, [sp, #28]
 8004b6c:	4654      	mov	r4, sl
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f04f 0c0a 	mov.w	ip, #10
 8004b74:	4621      	mov	r1, r4
 8004b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b7a:	3b30      	subs	r3, #48	; 0x30
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d94e      	bls.n	8004c1e <_svfiprintf_r+0x17e>
 8004b80:	b1b0      	cbz	r0, 8004bb0 <_svfiprintf_r+0x110>
 8004b82:	9207      	str	r2, [sp, #28]
 8004b84:	e014      	b.n	8004bb0 <_svfiprintf_r+0x110>
 8004b86:	eba0 0308 	sub.w	r3, r0, r8
 8004b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	9304      	str	r3, [sp, #16]
 8004b92:	46a2      	mov	sl, r4
 8004b94:	e7d2      	b.n	8004b3c <_svfiprintf_r+0x9c>
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	1d19      	adds	r1, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	9103      	str	r1, [sp, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfbb      	ittet	lt
 8004ba2:	425b      	neglt	r3, r3
 8004ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ba8:	9307      	strge	r3, [sp, #28]
 8004baa:	9307      	strlt	r3, [sp, #28]
 8004bac:	bfb8      	it	lt
 8004bae:	9204      	strlt	r2, [sp, #16]
 8004bb0:	7823      	ldrb	r3, [r4, #0]
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d10c      	bne.n	8004bd0 <_svfiprintf_r+0x130>
 8004bb6:	7863      	ldrb	r3, [r4, #1]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d135      	bne.n	8004c28 <_svfiprintf_r+0x188>
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	9203      	str	r2, [sp, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bfb8      	it	lt
 8004bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bcc:	3402      	adds	r4, #2
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c9c <_svfiprintf_r+0x1fc>
 8004bd4:	7821      	ldrb	r1, [r4, #0]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	4650      	mov	r0, sl
 8004bda:	f7fb fb39 	bl	8000250 <memchr>
 8004bde:	b140      	cbz	r0, 8004bf2 <_svfiprintf_r+0x152>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	eba0 000a 	sub.w	r0, r0, sl
 8004be6:	fa03 f000 	lsl.w	r0, r3, r0
 8004bea:	9b04      	ldr	r3, [sp, #16]
 8004bec:	4303      	orrs	r3, r0
 8004bee:	3401      	adds	r4, #1
 8004bf0:	9304      	str	r3, [sp, #16]
 8004bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf6:	4826      	ldr	r0, [pc, #152]	; (8004c90 <_svfiprintf_r+0x1f0>)
 8004bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bfc:	2206      	movs	r2, #6
 8004bfe:	f7fb fb27 	bl	8000250 <memchr>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d038      	beq.n	8004c78 <_svfiprintf_r+0x1d8>
 8004c06:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <_svfiprintf_r+0x1f4>)
 8004c08:	bb1b      	cbnz	r3, 8004c52 <_svfiprintf_r+0x1b2>
 8004c0a:	9b03      	ldr	r3, [sp, #12]
 8004c0c:	3307      	adds	r3, #7
 8004c0e:	f023 0307 	bic.w	r3, r3, #7
 8004c12:	3308      	adds	r3, #8
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c18:	4433      	add	r3, r6
 8004c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1c:	e767      	b.n	8004aee <_svfiprintf_r+0x4e>
 8004c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c22:	460c      	mov	r4, r1
 8004c24:	2001      	movs	r0, #1
 8004c26:	e7a5      	b.n	8004b74 <_svfiprintf_r+0xd4>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	3401      	adds	r4, #1
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f04f 0c0a 	mov.w	ip, #10
 8004c34:	4620      	mov	r0, r4
 8004c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c3a:	3a30      	subs	r2, #48	; 0x30
 8004c3c:	2a09      	cmp	r2, #9
 8004c3e:	d903      	bls.n	8004c48 <_svfiprintf_r+0x1a8>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0c5      	beq.n	8004bd0 <_svfiprintf_r+0x130>
 8004c44:	9105      	str	r1, [sp, #20]
 8004c46:	e7c3      	b.n	8004bd0 <_svfiprintf_r+0x130>
 8004c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e7f0      	b.n	8004c34 <_svfiprintf_r+0x194>
 8004c52:	ab03      	add	r3, sp, #12
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	462a      	mov	r2, r5
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <_svfiprintf_r+0x1f8>)
 8004c5a:	a904      	add	r1, sp, #16
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f3af 8000 	nop.w
 8004c62:	1c42      	adds	r2, r0, #1
 8004c64:	4606      	mov	r6, r0
 8004c66:	d1d6      	bne.n	8004c16 <_svfiprintf_r+0x176>
 8004c68:	89ab      	ldrh	r3, [r5, #12]
 8004c6a:	065b      	lsls	r3, r3, #25
 8004c6c:	f53f af2c 	bmi.w	8004ac8 <_svfiprintf_r+0x28>
 8004c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c72:	b01d      	add	sp, #116	; 0x74
 8004c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c78:	ab03      	add	r3, sp, #12
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <_svfiprintf_r+0x1f8>)
 8004c80:	a904      	add	r1, sp, #16
 8004c82:	4638      	mov	r0, r7
 8004c84:	f000 f87a 	bl	8004d7c <_printf_i>
 8004c88:	e7eb      	b.n	8004c62 <_svfiprintf_r+0x1c2>
 8004c8a:	bf00      	nop
 8004c8c:	08005439 	.word	0x08005439
 8004c90:	08005443 	.word	0x08005443
 8004c94:	00000000 	.word	0x00000000
 8004c98:	080049e9 	.word	0x080049e9
 8004c9c:	0800543f 	.word	0x0800543f

08004ca0 <_printf_common>:
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	688a      	ldr	r2, [r1, #8]
 8004caa:	690b      	ldr	r3, [r1, #16]
 8004cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	bfb8      	it	lt
 8004cb4:	4613      	movlt	r3, r2
 8004cb6:	6033      	str	r3, [r6, #0]
 8004cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	b10a      	cbz	r2, 8004cc6 <_printf_common+0x26>
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	0699      	lsls	r1, r3, #26
 8004cca:	bf42      	ittt	mi
 8004ccc:	6833      	ldrmi	r3, [r6, #0]
 8004cce:	3302      	addmi	r3, #2
 8004cd0:	6033      	strmi	r3, [r6, #0]
 8004cd2:	6825      	ldr	r5, [r4, #0]
 8004cd4:	f015 0506 	ands.w	r5, r5, #6
 8004cd8:	d106      	bne.n	8004ce8 <_printf_common+0x48>
 8004cda:	f104 0a19 	add.w	sl, r4, #25
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	6832      	ldr	r2, [r6, #0]
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	42ab      	cmp	r3, r5
 8004ce6:	dc26      	bgt.n	8004d36 <_printf_common+0x96>
 8004ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cec:	1e13      	subs	r3, r2, #0
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	bf18      	it	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	0692      	lsls	r2, r2, #26
 8004cf6:	d42b      	bmi.n	8004d50 <_printf_common+0xb0>
 8004cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	4638      	mov	r0, r7
 8004d00:	47c0      	blx	r8
 8004d02:	3001      	adds	r0, #1
 8004d04:	d01e      	beq.n	8004d44 <_printf_common+0xa4>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	68e5      	ldr	r5, [r4, #12]
 8004d0a:	6832      	ldr	r2, [r6, #0]
 8004d0c:	f003 0306 	and.w	r3, r3, #6
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	bf08      	it	eq
 8004d14:	1aad      	subeq	r5, r5, r2
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	6922      	ldr	r2, [r4, #16]
 8004d1a:	bf0c      	ite	eq
 8004d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d20:	2500      	movne	r5, #0
 8004d22:	4293      	cmp	r3, r2
 8004d24:	bfc4      	itt	gt
 8004d26:	1a9b      	subgt	r3, r3, r2
 8004d28:	18ed      	addgt	r5, r5, r3
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	341a      	adds	r4, #26
 8004d2e:	42b5      	cmp	r5, r6
 8004d30:	d11a      	bne.n	8004d68 <_printf_common+0xc8>
 8004d32:	2000      	movs	r0, #0
 8004d34:	e008      	b.n	8004d48 <_printf_common+0xa8>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4652      	mov	r2, sl
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	47c0      	blx	r8
 8004d40:	3001      	adds	r0, #1
 8004d42:	d103      	bne.n	8004d4c <_printf_common+0xac>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	e7c6      	b.n	8004cde <_printf_common+0x3e>
 8004d50:	18e1      	adds	r1, r4, r3
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	2030      	movs	r0, #48	; 0x30
 8004d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d5a:	4422      	add	r2, r4
 8004d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d64:	3302      	adds	r3, #2
 8004d66:	e7c7      	b.n	8004cf8 <_printf_common+0x58>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d0e6      	beq.n	8004d44 <_printf_common+0xa4>
 8004d76:	3601      	adds	r6, #1
 8004d78:	e7d9      	b.n	8004d2e <_printf_common+0x8e>
	...

08004d7c <_printf_i>:
 8004d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	7e0f      	ldrb	r7, [r1, #24]
 8004d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d84:	2f78      	cmp	r7, #120	; 0x78
 8004d86:	4691      	mov	r9, r2
 8004d88:	4680      	mov	r8, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	469a      	mov	sl, r3
 8004d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d92:	d807      	bhi.n	8004da4 <_printf_i+0x28>
 8004d94:	2f62      	cmp	r7, #98	; 0x62
 8004d96:	d80a      	bhi.n	8004dae <_printf_i+0x32>
 8004d98:	2f00      	cmp	r7, #0
 8004d9a:	f000 80d8 	beq.w	8004f4e <_printf_i+0x1d2>
 8004d9e:	2f58      	cmp	r7, #88	; 0x58
 8004da0:	f000 80a3 	beq.w	8004eea <_printf_i+0x16e>
 8004da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dac:	e03a      	b.n	8004e24 <_printf_i+0xa8>
 8004dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004db2:	2b15      	cmp	r3, #21
 8004db4:	d8f6      	bhi.n	8004da4 <_printf_i+0x28>
 8004db6:	a101      	add	r1, pc, #4	; (adr r1, 8004dbc <_printf_i+0x40>)
 8004db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dbc:	08004e15 	.word	0x08004e15
 8004dc0:	08004e29 	.word	0x08004e29
 8004dc4:	08004da5 	.word	0x08004da5
 8004dc8:	08004da5 	.word	0x08004da5
 8004dcc:	08004da5 	.word	0x08004da5
 8004dd0:	08004da5 	.word	0x08004da5
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	08004da5 	.word	0x08004da5
 8004ddc:	08004da5 	.word	0x08004da5
 8004de0:	08004da5 	.word	0x08004da5
 8004de4:	08004da5 	.word	0x08004da5
 8004de8:	08004f35 	.word	0x08004f35
 8004dec:	08004e59 	.word	0x08004e59
 8004df0:	08004f17 	.word	0x08004f17
 8004df4:	08004da5 	.word	0x08004da5
 8004df8:	08004da5 	.word	0x08004da5
 8004dfc:	08004f57 	.word	0x08004f57
 8004e00:	08004da5 	.word	0x08004da5
 8004e04:	08004e59 	.word	0x08004e59
 8004e08:	08004da5 	.word	0x08004da5
 8004e0c:	08004da5 	.word	0x08004da5
 8004e10:	08004f1f 	.word	0x08004f1f
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	602a      	str	r2, [r5, #0]
 8004e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0a3      	b.n	8004f70 <_printf_i+0x1f4>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	6829      	ldr	r1, [r5, #0]
 8004e2c:	0606      	lsls	r6, r0, #24
 8004e2e:	f101 0304 	add.w	r3, r1, #4
 8004e32:	d50a      	bpl.n	8004e4a <_printf_i+0xce>
 8004e34:	680e      	ldr	r6, [r1, #0]
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	da03      	bge.n	8004e44 <_printf_i+0xc8>
 8004e3c:	232d      	movs	r3, #45	; 0x2d
 8004e3e:	4276      	negs	r6, r6
 8004e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e44:	485e      	ldr	r0, [pc, #376]	; (8004fc0 <_printf_i+0x244>)
 8004e46:	230a      	movs	r3, #10
 8004e48:	e019      	b.n	8004e7e <_printf_i+0x102>
 8004e4a:	680e      	ldr	r6, [r1, #0]
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e52:	bf18      	it	ne
 8004e54:	b236      	sxthne	r6, r6
 8004e56:	e7ef      	b.n	8004e38 <_printf_i+0xbc>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	6820      	ldr	r0, [r4, #0]
 8004e5c:	1d19      	adds	r1, r3, #4
 8004e5e:	6029      	str	r1, [r5, #0]
 8004e60:	0601      	lsls	r1, r0, #24
 8004e62:	d501      	bpl.n	8004e68 <_printf_i+0xec>
 8004e64:	681e      	ldr	r6, [r3, #0]
 8004e66:	e002      	b.n	8004e6e <_printf_i+0xf2>
 8004e68:	0646      	lsls	r6, r0, #25
 8004e6a:	d5fb      	bpl.n	8004e64 <_printf_i+0xe8>
 8004e6c:	881e      	ldrh	r6, [r3, #0]
 8004e6e:	4854      	ldr	r0, [pc, #336]	; (8004fc0 <_printf_i+0x244>)
 8004e70:	2f6f      	cmp	r7, #111	; 0x6f
 8004e72:	bf0c      	ite	eq
 8004e74:	2308      	moveq	r3, #8
 8004e76:	230a      	movne	r3, #10
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e7e:	6865      	ldr	r5, [r4, #4]
 8004e80:	60a5      	str	r5, [r4, #8]
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	bfa2      	ittt	ge
 8004e86:	6821      	ldrge	r1, [r4, #0]
 8004e88:	f021 0104 	bicge.w	r1, r1, #4
 8004e8c:	6021      	strge	r1, [r4, #0]
 8004e8e:	b90e      	cbnz	r6, 8004e94 <_printf_i+0x118>
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	d04d      	beq.n	8004f30 <_printf_i+0x1b4>
 8004e94:	4615      	mov	r5, r2
 8004e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ea4:	4637      	mov	r7, r6
 8004ea6:	42bb      	cmp	r3, r7
 8004ea8:	460e      	mov	r6, r1
 8004eaa:	d9f4      	bls.n	8004e96 <_printf_i+0x11a>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d10b      	bne.n	8004ec8 <_printf_i+0x14c>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	07de      	lsls	r6, r3, #31
 8004eb4:	d508      	bpl.n	8004ec8 <_printf_i+0x14c>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	6861      	ldr	r1, [r4, #4]
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	bfde      	ittt	le
 8004ebe:	2330      	movle	r3, #48	; 0x30
 8004ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ec8:	1b52      	subs	r2, r2, r5
 8004eca:	6122      	str	r2, [r4, #16]
 8004ecc:	f8cd a000 	str.w	sl, [sp]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	aa03      	add	r2, sp, #12
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fee2 	bl	8004ca0 <_printf_common>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d14c      	bne.n	8004f7a <_printf_i+0x1fe>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	b004      	add	sp, #16
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	4835      	ldr	r0, [pc, #212]	; (8004fc0 <_printf_i+0x244>)
 8004eec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ef0:	6829      	ldr	r1, [r5, #0]
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ef8:	6029      	str	r1, [r5, #0]
 8004efa:	061d      	lsls	r5, r3, #24
 8004efc:	d514      	bpl.n	8004f28 <_printf_i+0x1ac>
 8004efe:	07df      	lsls	r7, r3, #31
 8004f00:	bf44      	itt	mi
 8004f02:	f043 0320 	orrmi.w	r3, r3, #32
 8004f06:	6023      	strmi	r3, [r4, #0]
 8004f08:	b91e      	cbnz	r6, 8004f12 <_printf_i+0x196>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f023 0320 	bic.w	r3, r3, #32
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	2310      	movs	r3, #16
 8004f14:	e7b0      	b.n	8004e78 <_printf_i+0xfc>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	f043 0320 	orr.w	r3, r3, #32
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	2378      	movs	r3, #120	; 0x78
 8004f20:	4828      	ldr	r0, [pc, #160]	; (8004fc4 <_printf_i+0x248>)
 8004f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f26:	e7e3      	b.n	8004ef0 <_printf_i+0x174>
 8004f28:	0659      	lsls	r1, r3, #25
 8004f2a:	bf48      	it	mi
 8004f2c:	b2b6      	uxthmi	r6, r6
 8004f2e:	e7e6      	b.n	8004efe <_printf_i+0x182>
 8004f30:	4615      	mov	r5, r2
 8004f32:	e7bb      	b.n	8004eac <_printf_i+0x130>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	6826      	ldr	r6, [r4, #0]
 8004f38:	6961      	ldr	r1, [r4, #20]
 8004f3a:	1d18      	adds	r0, r3, #4
 8004f3c:	6028      	str	r0, [r5, #0]
 8004f3e:	0635      	lsls	r5, r6, #24
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	d501      	bpl.n	8004f48 <_printf_i+0x1cc>
 8004f44:	6019      	str	r1, [r3, #0]
 8004f46:	e002      	b.n	8004f4e <_printf_i+0x1d2>
 8004f48:	0670      	lsls	r0, r6, #25
 8004f4a:	d5fb      	bpl.n	8004f44 <_printf_i+0x1c8>
 8004f4c:	8019      	strh	r1, [r3, #0]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	4615      	mov	r5, r2
 8004f54:	e7ba      	b.n	8004ecc <_printf_i+0x150>
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	602a      	str	r2, [r5, #0]
 8004f5c:	681d      	ldr	r5, [r3, #0]
 8004f5e:	6862      	ldr	r2, [r4, #4]
 8004f60:	2100      	movs	r1, #0
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7fb f974 	bl	8000250 <memchr>
 8004f68:	b108      	cbz	r0, 8004f6e <_printf_i+0x1f2>
 8004f6a:	1b40      	subs	r0, r0, r5
 8004f6c:	6060      	str	r0, [r4, #4]
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	2300      	movs	r3, #0
 8004f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f78:	e7a8      	b.n	8004ecc <_printf_i+0x150>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	47d0      	blx	sl
 8004f84:	3001      	adds	r0, #1
 8004f86:	d0ab      	beq.n	8004ee0 <_printf_i+0x164>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	079b      	lsls	r3, r3, #30
 8004f8c:	d413      	bmi.n	8004fb6 <_printf_i+0x23a>
 8004f8e:	68e0      	ldr	r0, [r4, #12]
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	4298      	cmp	r0, r3
 8004f94:	bfb8      	it	lt
 8004f96:	4618      	movlt	r0, r3
 8004f98:	e7a4      	b.n	8004ee4 <_printf_i+0x168>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	47d0      	blx	sl
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d09b      	beq.n	8004ee0 <_printf_i+0x164>
 8004fa8:	3501      	adds	r5, #1
 8004faa:	68e3      	ldr	r3, [r4, #12]
 8004fac:	9903      	ldr	r1, [sp, #12]
 8004fae:	1a5b      	subs	r3, r3, r1
 8004fb0:	42ab      	cmp	r3, r5
 8004fb2:	dcf2      	bgt.n	8004f9a <_printf_i+0x21e>
 8004fb4:	e7eb      	b.n	8004f8e <_printf_i+0x212>
 8004fb6:	2500      	movs	r5, #0
 8004fb8:	f104 0619 	add.w	r6, r4, #25
 8004fbc:	e7f5      	b.n	8004faa <_printf_i+0x22e>
 8004fbe:	bf00      	nop
 8004fc0:	0800544a 	.word	0x0800544a
 8004fc4:	0800545b 	.word	0x0800545b

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <memmove>:
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	eb01 0402 	add.w	r4, r1, r2
 8004fec:	d902      	bls.n	8004ff4 <memmove+0x10>
 8004fee:	4284      	cmp	r4, r0
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	d807      	bhi.n	8005004 <memmove+0x20>
 8004ff4:	1e43      	subs	r3, r0, #1
 8004ff6:	42a1      	cmp	r1, r4
 8004ff8:	d008      	beq.n	800500c <memmove+0x28>
 8004ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005002:	e7f8      	b.n	8004ff6 <memmove+0x12>
 8005004:	4402      	add	r2, r0
 8005006:	4601      	mov	r1, r0
 8005008:	428a      	cmp	r2, r1
 800500a:	d100      	bne.n	800500e <memmove+0x2a>
 800500c:	bd10      	pop	{r4, pc}
 800500e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005016:	e7f7      	b.n	8005008 <memmove+0x24>

08005018 <_free_r>:
 8005018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800501a:	2900      	cmp	r1, #0
 800501c:	d044      	beq.n	80050a8 <_free_r+0x90>
 800501e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005022:	9001      	str	r0, [sp, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f1a1 0404 	sub.w	r4, r1, #4
 800502a:	bfb8      	it	lt
 800502c:	18e4      	addlt	r4, r4, r3
 800502e:	f000 f913 	bl	8005258 <__malloc_lock>
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <_free_r+0x94>)
 8005034:	9801      	ldr	r0, [sp, #4]
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	b933      	cbnz	r3, 8005048 <_free_r+0x30>
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	6014      	str	r4, [r2, #0]
 800503e:	b003      	add	sp, #12
 8005040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005044:	f000 b90e 	b.w	8005264 <__malloc_unlock>
 8005048:	42a3      	cmp	r3, r4
 800504a:	d908      	bls.n	800505e <_free_r+0x46>
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1961      	adds	r1, r4, r5
 8005050:	428b      	cmp	r3, r1
 8005052:	bf01      	itttt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	1949      	addeq	r1, r1, r5
 800505a:	6021      	streq	r1, [r4, #0]
 800505c:	e7ed      	b.n	800503a <_free_r+0x22>
 800505e:	461a      	mov	r2, r3
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b10b      	cbz	r3, 8005068 <_free_r+0x50>
 8005064:	42a3      	cmp	r3, r4
 8005066:	d9fa      	bls.n	800505e <_free_r+0x46>
 8005068:	6811      	ldr	r1, [r2, #0]
 800506a:	1855      	adds	r5, r2, r1
 800506c:	42a5      	cmp	r5, r4
 800506e:	d10b      	bne.n	8005088 <_free_r+0x70>
 8005070:	6824      	ldr	r4, [r4, #0]
 8005072:	4421      	add	r1, r4
 8005074:	1854      	adds	r4, r2, r1
 8005076:	42a3      	cmp	r3, r4
 8005078:	6011      	str	r1, [r2, #0]
 800507a:	d1e0      	bne.n	800503e <_free_r+0x26>
 800507c:	681c      	ldr	r4, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	6053      	str	r3, [r2, #4]
 8005082:	4421      	add	r1, r4
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	e7da      	b.n	800503e <_free_r+0x26>
 8005088:	d902      	bls.n	8005090 <_free_r+0x78>
 800508a:	230c      	movs	r3, #12
 800508c:	6003      	str	r3, [r0, #0]
 800508e:	e7d6      	b.n	800503e <_free_r+0x26>
 8005090:	6825      	ldr	r5, [r4, #0]
 8005092:	1961      	adds	r1, r4, r5
 8005094:	428b      	cmp	r3, r1
 8005096:	bf04      	itt	eq
 8005098:	6819      	ldreq	r1, [r3, #0]
 800509a:	685b      	ldreq	r3, [r3, #4]
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	bf04      	itt	eq
 80050a0:	1949      	addeq	r1, r1, r5
 80050a2:	6021      	streq	r1, [r4, #0]
 80050a4:	6054      	str	r4, [r2, #4]
 80050a6:	e7ca      	b.n	800503e <_free_r+0x26>
 80050a8:	b003      	add	sp, #12
 80050aa:	bd30      	pop	{r4, r5, pc}
 80050ac:	200004e0 	.word	0x200004e0

080050b0 <sbrk_aligned>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4e0e      	ldr	r6, [pc, #56]	; (80050ec <sbrk_aligned+0x3c>)
 80050b4:	460c      	mov	r4, r1
 80050b6:	6831      	ldr	r1, [r6, #0]
 80050b8:	4605      	mov	r5, r0
 80050ba:	b911      	cbnz	r1, 80050c2 <sbrk_aligned+0x12>
 80050bc:	f000 f8bc 	bl	8005238 <_sbrk_r>
 80050c0:	6030      	str	r0, [r6, #0]
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f8b7 	bl	8005238 <_sbrk_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d00a      	beq.n	80050e4 <sbrk_aligned+0x34>
 80050ce:	1cc4      	adds	r4, r0, #3
 80050d0:	f024 0403 	bic.w	r4, r4, #3
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d007      	beq.n	80050e8 <sbrk_aligned+0x38>
 80050d8:	1a21      	subs	r1, r4, r0
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 f8ac 	bl	8005238 <_sbrk_r>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d101      	bne.n	80050e8 <sbrk_aligned+0x38>
 80050e4:	f04f 34ff 	mov.w	r4, #4294967295
 80050e8:	4620      	mov	r0, r4
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	200004e4 	.word	0x200004e4

080050f0 <_malloc_r>:
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	1ccd      	adds	r5, r1, #3
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	2d00      	cmp	r5, #0
 8005104:	4607      	mov	r7, r0
 8005106:	db01      	blt.n	800510c <_malloc_r+0x1c>
 8005108:	42a9      	cmp	r1, r5
 800510a:	d905      	bls.n	8005118 <_malloc_r+0x28>
 800510c:	230c      	movs	r3, #12
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	2600      	movs	r6, #0
 8005112:	4630      	mov	r0, r6
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	4e2e      	ldr	r6, [pc, #184]	; (80051d4 <_malloc_r+0xe4>)
 800511a:	f000 f89d 	bl	8005258 <__malloc_lock>
 800511e:	6833      	ldr	r3, [r6, #0]
 8005120:	461c      	mov	r4, r3
 8005122:	bb34      	cbnz	r4, 8005172 <_malloc_r+0x82>
 8005124:	4629      	mov	r1, r5
 8005126:	4638      	mov	r0, r7
 8005128:	f7ff ffc2 	bl	80050b0 <sbrk_aligned>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	4604      	mov	r4, r0
 8005130:	d14d      	bne.n	80051ce <_malloc_r+0xde>
 8005132:	6834      	ldr	r4, [r6, #0]
 8005134:	4626      	mov	r6, r4
 8005136:	2e00      	cmp	r6, #0
 8005138:	d140      	bne.n	80051bc <_malloc_r+0xcc>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	4631      	mov	r1, r6
 800513e:	4638      	mov	r0, r7
 8005140:	eb04 0803 	add.w	r8, r4, r3
 8005144:	f000 f878 	bl	8005238 <_sbrk_r>
 8005148:	4580      	cmp	r8, r0
 800514a:	d13a      	bne.n	80051c2 <_malloc_r+0xd2>
 800514c:	6821      	ldr	r1, [r4, #0]
 800514e:	3503      	adds	r5, #3
 8005150:	1a6d      	subs	r5, r5, r1
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	4629      	mov	r1, r5
 8005160:	4638      	mov	r0, r7
 8005162:	f7ff ffa5 	bl	80050b0 <sbrk_aligned>
 8005166:	3001      	adds	r0, #1
 8005168:	d02b      	beq.n	80051c2 <_malloc_r+0xd2>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	442b      	add	r3, r5
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	e00e      	b.n	8005190 <_malloc_r+0xa0>
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	1b52      	subs	r2, r2, r5
 8005176:	d41e      	bmi.n	80051b6 <_malloc_r+0xc6>
 8005178:	2a0b      	cmp	r2, #11
 800517a:	d916      	bls.n	80051aa <_malloc_r+0xba>
 800517c:	1961      	adds	r1, r4, r5
 800517e:	42a3      	cmp	r3, r4
 8005180:	6025      	str	r5, [r4, #0]
 8005182:	bf18      	it	ne
 8005184:	6059      	strne	r1, [r3, #4]
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	bf08      	it	eq
 800518a:	6031      	streq	r1, [r6, #0]
 800518c:	5162      	str	r2, [r4, r5]
 800518e:	604b      	str	r3, [r1, #4]
 8005190:	4638      	mov	r0, r7
 8005192:	f104 060b 	add.w	r6, r4, #11
 8005196:	f000 f865 	bl	8005264 <__malloc_unlock>
 800519a:	f026 0607 	bic.w	r6, r6, #7
 800519e:	1d23      	adds	r3, r4, #4
 80051a0:	1af2      	subs	r2, r6, r3
 80051a2:	d0b6      	beq.n	8005112 <_malloc_r+0x22>
 80051a4:	1b9b      	subs	r3, r3, r6
 80051a6:	50a3      	str	r3, [r4, r2]
 80051a8:	e7b3      	b.n	8005112 <_malloc_r+0x22>
 80051aa:	6862      	ldr	r2, [r4, #4]
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	bf0c      	ite	eq
 80051b0:	6032      	streq	r2, [r6, #0]
 80051b2:	605a      	strne	r2, [r3, #4]
 80051b4:	e7ec      	b.n	8005190 <_malloc_r+0xa0>
 80051b6:	4623      	mov	r3, r4
 80051b8:	6864      	ldr	r4, [r4, #4]
 80051ba:	e7b2      	b.n	8005122 <_malloc_r+0x32>
 80051bc:	4634      	mov	r4, r6
 80051be:	6876      	ldr	r6, [r6, #4]
 80051c0:	e7b9      	b.n	8005136 <_malloc_r+0x46>
 80051c2:	230c      	movs	r3, #12
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4638      	mov	r0, r7
 80051c8:	f000 f84c 	bl	8005264 <__malloc_unlock>
 80051cc:	e7a1      	b.n	8005112 <_malloc_r+0x22>
 80051ce:	6025      	str	r5, [r4, #0]
 80051d0:	e7de      	b.n	8005190 <_malloc_r+0xa0>
 80051d2:	bf00      	nop
 80051d4:	200004e0 	.word	0x200004e0

080051d8 <_realloc_r>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	4680      	mov	r8, r0
 80051de:	4614      	mov	r4, r2
 80051e0:	460e      	mov	r6, r1
 80051e2:	b921      	cbnz	r1, 80051ee <_realloc_r+0x16>
 80051e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	4611      	mov	r1, r2
 80051ea:	f7ff bf81 	b.w	80050f0 <_malloc_r>
 80051ee:	b92a      	cbnz	r2, 80051fc <_realloc_r+0x24>
 80051f0:	f7ff ff12 	bl	8005018 <_free_r>
 80051f4:	4625      	mov	r5, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051fc:	f000 f838 	bl	8005270 <_malloc_usable_size_r>
 8005200:	4284      	cmp	r4, r0
 8005202:	4607      	mov	r7, r0
 8005204:	d802      	bhi.n	800520c <_realloc_r+0x34>
 8005206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800520a:	d812      	bhi.n	8005232 <_realloc_r+0x5a>
 800520c:	4621      	mov	r1, r4
 800520e:	4640      	mov	r0, r8
 8005210:	f7ff ff6e 	bl	80050f0 <_malloc_r>
 8005214:	4605      	mov	r5, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d0ed      	beq.n	80051f6 <_realloc_r+0x1e>
 800521a:	42bc      	cmp	r4, r7
 800521c:	4622      	mov	r2, r4
 800521e:	4631      	mov	r1, r6
 8005220:	bf28      	it	cs
 8005222:	463a      	movcs	r2, r7
 8005224:	f7ff fed0 	bl	8004fc8 <memcpy>
 8005228:	4631      	mov	r1, r6
 800522a:	4640      	mov	r0, r8
 800522c:	f7ff fef4 	bl	8005018 <_free_r>
 8005230:	e7e1      	b.n	80051f6 <_realloc_r+0x1e>
 8005232:	4635      	mov	r5, r6
 8005234:	e7df      	b.n	80051f6 <_realloc_r+0x1e>
	...

08005238 <_sbrk_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	; (8005254 <_sbrk_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fc f9be 	bl	80015c4 <_sbrk>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_sbrk_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_sbrk_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	200004e8 	.word	0x200004e8

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_lock+0x8>)
 800525a:	f000 b811 	b.w	8005280 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	200004ec 	.word	0x200004ec

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_unlock+0x8>)
 8005266:	f000 b80c 	b.w	8005282 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	200004ec 	.word	0x200004ec

08005270 <_malloc_usable_size_r>:
 8005270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005274:	1f18      	subs	r0, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfbc      	itt	lt
 800527a:	580b      	ldrlt	r3, [r1, r0]
 800527c:	18c0      	addlt	r0, r0, r3
 800527e:	4770      	bx	lr

08005280 <__retarget_lock_acquire_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_release_recursive>:
 8005282:	4770      	bx	lr

08005284 <_init>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

08005290 <_fini>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr
